<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content"><section epub:type="chapter" role="doc-chapter" aria-labelledby="c07_1">&#13;
<header>&#13;
<h1 id="c07_1"><span epub:type="pagebreak" id="Page_349" role="doc-pagebreak" aria-label="349"/><span id="c07"/><span class="chapterNumber">Chapter 7</span><br/><span class="chapterTitle">Cryptography</span></h1>&#13;
</header>&#13;
<section aria-label="chapter opening"><span id="c07-sec-0001"/>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3">&#13;
<h3>THE SSCP EXAM OBJECTIVES COVERED IN THIS CHAPTER INCLUDE:</h3>&#13;
<ul class="none" id="c07-list-0001">&#13;
<li id="c07-li-0001"><b>Domain 5: Cryptography</b>&#13;
<ul class="tick" id="c07-list-1001">&#13;
<li id="c07-li-0002"><b>5.1: Understand reasons and requirements for cryptography</b></li>&#13;
<li id="c07-li-0003"><b>5.2: Apply cryptography concepts</b></li>&#13;
<li id="c07-li-0004"><b>5.3: Understand and implement secure protocols</b></li>&#13;
<li id="c07-li-0005"><b>5.4: Understand and support public key infrastructure (PKI) systems</b></li>&#13;
</ul></li>&#13;
</ul>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
<p id="c07-para-0005"><span epub:type="pagebreak" id="Page_350" role="doc-pagebreak" aria-label="350"/>Information at rest; information in use; information in motion. This defines our information security problem in a nutshell and dictates our consistent, integrated use of any and every means possible to protect that information. Cryptography is one such set of techniques, and it has its roots in the fundamental ways that humans represent ideas with symbols. We often think that cryptography is all about making messages secret, but as you'll see in this chapter, almost every aspect of modern information systems technologies depends on cryptography in some manner.</p>&#13;
<p id="c07-para-0006">We'll also have to confront the fundamental conundrum of cryptography: to keep something secret, you have to use <i>another</i> secret—but at the same time, you have to <i>publish</i>.</p>&#13;
</section>&#13;
<section aria-labelledby="head-2-108"><span id="c07-sec-0002"/>&#13;
<h2 id="head-2-108">Cryptography: What and Why</h2>&#13;
<p id="c07-para-0007">“Is it secret? Is it safe?”</p>&#13;
<p id="c07-para-0008">Gandalf asks that about the One Ring (in J. R. R. Tolkien's masterpiece <i>The Lord of the Rings</i>), and yet that same set of questions is asked many times a day about critical information assets vital to businesses, organizations, and individuals. That question <i>seems</i> to focus on the confidentiality and integrity aspects of the CIA triad, but as you saw in <a href="c05.xhtml">Chapter 5</a>, “Communications and Network Security,” keeping communications and network systems truly safe and secure requires we add nonrepudiation and authentication to that triad: thus CIANA becomes our watchword. Let's see how to use cryptography to keep our systems safe, secure, and available; to prevent valid messages from being repudiated (or denied); and to authenticate actions requested by subjects throughout our systems.</p>&#13;
<p id="c07-para-0009">Since the earliest days of written languages, people have been using “secret writing” for two important purposes: to protect the confidentiality of the message and to authenticate that the message came from whom the sender claimed to be. The earliest known use of cryptography dates from 1500 BC, in which a craftsman in Mesopotamia encrypted his recipe for a pottery glaze (the world's first known trade secret, perhaps?).</p>&#13;
<p id="c07-para-0010">For most of the last 3,500 years, cryptography has been primarily based on <i>lexical analysis</i>—the study of the properties of a language and the ways in which people use it. It was not until the late nineteenth century CE that mathematics, number theory, and formal logic started to play a greater role in creating new cryptographic systems (and in breaking them). Ancient Greeks using their scytale to implement rail fence ciphers might not recognize the mathematics of twenty-first century cryptography, but they probably would recognize the basic elements: starting with plaintext, an algorithm, keys, and seed or salt values, they too built systematic procedures for encrypting their secrets, transmitting them (by couriers), and then decrypting them at the receiving end. They faced the same challenges we face today: keeping the content secret, protecting its authenticity, and yet getting the secret conveyed and understood in timely ways.</p>&#13;
<p><span epub:type="pagebreak" id="Page_351" role="doc-pagebreak" aria-label="351"/>Cryptography brings many capabilities to the information systems designer, builder, user, and owner:</p>&#13;
<ul class="square" id="c07-list-0002">&#13;
<li id="c07-li-0006"><i>Confidentiality:</i> Protect the meaning of information and restrict its use to authorized users.</li>&#13;
<li id="c07-li-0007"><i>Utility</i>: Map very large sets of possible messages, values, or data items to much smaller, more useful sets.</li>&#13;
<li id="c07-li-0008"><i>Uniqueness</i>: Generate and manage identifiers for use in access control and privilege management systems.</li>&#13;
<li id="c07-li-0009"><i>Identity</i>: Validate that a person or process is who and what they claim to be.</li>&#13;
<li id="c07-li-0010"><i>Privacy</i>: Ensure that information related to the identity of a person or process is kept confidential, and its integrity is maintained throughout.</li>&#13;
<li id="c07-li-0011"><i>Nonrepudiation</i>: Provide ways to sign messages, documents, and even software executables so that recipients can be assured of their authenticity.</li>&#13;
<li id="c07-li-0012"><i>Integrity</i>: Ensure that the content of the information has not been changed in any way except by authorized, trustworthy processes.</li>&#13;
<li id="c07-li-0013"><i>Safety</i>: protect commands and data for controlling and monitoring safety-critical processes</li>&#13;
</ul>&#13;
<p id="c07-para-0012">Privacy has always been recognized as an essential systems requirement, but it often was assumed to be covered by any security measures that provided or assured confidentiality. Part of the challenge has been gaining acceptance of the fact that modern digitally-enabled identity theft can be far more damaging to the individual than more traditional forms of impersonation (such as forging someone's signature onto a check drawn on their bank account) has been. Changes in law and in attitudes were necessary to make identity theft a separate and distinct form of crime. Another way that our thinking about privacy has evolved quite recently is to view it in aggregate, such as when two different companies have their separate customer files merged, or the individual customer data records commingled, perhaps by a third party service provider. The integrity of each company's data as a complete and separate set has thus been compromised, even if each individual customer record remains unchanged.</p>&#13;
<p id="c07-para-0013">The past decade's experiences with massive data breaches, with the exfiltrated data being resold on the the Dark Web, has shown legislatures and courts around the world that stronger measures to protect personal privacy and personally sensitive data were required. As of 2021, more than 140 nations around the world have enacted laws and established regulatory frameworks regarding the protection of the privacy of individual persons, and the protection of other sensitive data about that person.</p>&#13;
<p id="c07-para-0014">Before we can get into the details and see how modern cryptography works, let's first define some starting points. Cryptography is a terminology-rich environment—some might even say that the terms we use to talk about cryptography or explain it are themselves encrypted, as a way of keeping its inner secrets to those who have the real need to know. Don't panic—we'll break that secret code for you step by step.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3"><span id="c07-fea-0001"/>&#13;
<p><img alt="Realworld" src="Images/realworld.png" class="left" width="239" height="36"/></p>&#13;
<h3 id="head-2-109">Give Cryptool a Try</h3>&#13;
<section><span id="c07-sec-0003"/>&#13;
<p id="c07-para-0015">One of the best ways to demystify the world of encryption can be found at the Cryptool Portal, known as “Cryptography for Everybody.” Supported by a group of European <span epub:type="pagebreak" id="Page_352" role="doc-pagebreak" aria-label="352"/>universities, Deutsche Bank AG, and businesses, it provides a highly visual, easy to use set of tools and resources to help all of us learn more about this vital and important element of the art of information security.</p>&#13;
<p id="c07-para-0016">Find it at <code><a href="https://www.cryptool.org">https://www.cryptool.org</a></code>, and select the language of your choice.</p>&#13;
</section>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
<section><span id="c07-sec-0004"/>&#13;
<h3 id="head-3-135">Codes and Ciphers: Defining Our Terms</h3>&#13;
<p id="c07-para-0017">Think back to the data-information-knowledge-wisdom pyramid we discussed in <a href="c01.xhtml">Chapter 1</a>, “The Business Case for Decision Assurance and Information Security.” That pyramid represents levels of abstraction about ideas and how people share those ideas to accomplish their goals and objectives. It also shows that every idea in <i>your</i> mind has to first be represented as a set of symbols <i>before</i> you can even attempt to communicate that idea to someone else. We <i>encode</i> ideas into a set of symbols by using rules or protocols that make our encoding regular and repeatable. The encoded idea is the message we send to the receiver. The receiver then needs to <i>decode</i> that idea, translating it back from symbols to meaning in order for their own mind to make sense of the idea, interpret it, and then use it or reject it. This process of encoding and decoding messages is at the heart of every communication process and, every conversation. Natural human languages have rules of <i>syntax</i>, which define the grammar and structure of words, sentences, paragraphs, and so on; they also have rules of <i>semantics</i>, which define how we use the symbols and the syntax to express meaning. Without both sender and receiver understanding the rules of syntax and semantics in much the same way, the message may get sent and received, but it probably won't be understood.</p>&#13;
<p id="c07-para-0018"><i>Encode</i> and <i>decode</i> seem to suggest secret codes, and unfortunately, people throughout history have been pretty sloppy with how they talk about “codes.” Morse code, for example, is an open, worldwide standard way to represent letters of the alphabet and other symbols by a series of long and short signals, and yet, anyone can read a message encoded in Morse. During both World Wars I and II, American forces used “code talkers,” elite units of Native Americans who spoke “in the clear,” unencrypted, over voice-grade radio systems—but they spoke in Choctaw, Creek, or Navaho, which no one but an other bilingual listener might have been able to intercept and translate.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3"><span id="c07-fea-0002"/>&#13;
<p><img alt="Design" src="Images/design.png" class="left" width="228" height="40"/></p>&#13;
<h3 id="head-2-110">The Prisoner's Code</h3>&#13;
<section><span id="c07-sec-0005"/>&#13;
<p id="c07-para-0019">For many years—probably as long as there have been prisons—prisoners have communicated with one another with tap codes of various forms. Where this started is conjecture; modern militaries have long trained their personnel to use such simple codes to help maintain morale and unit cohesion with fellow prisoners of war. Tapping on the bars of <span epub:type="pagebreak" id="Page_353" role="doc-pagebreak" aria-label="353"/>their cell, on the walls, or on drain pipes, they could send simple but effective messages to one another encoded as pulses of sound or vibration</p>&#13;
<p id="c07-para-0020">Tap codes use a table in which the alphabet has been placed—for Roman alphabets, a five row by five column table is sufficient (if C and K double up in one square). The first row holds A, B, C/K, D and E, and it goes on from there. Sending a message is done by first tapping the row, then the column number, with a short pause between row and column, and a longer one between letters. Thus “water” is sent as 5 taps, 2 taps; 1 tap, 1 tap; 4 taps, 4 taps; 1 tap, 5 taps; 4 taps, 2 taps. You can see this and explore other aspects of tap codes at <code><a href="https://wikivisually.com/wiki/Tap_code">https://wikivisually.com/wiki/Tap_code</a></code>.</p>&#13;
<p id="c07-para-0021">Training can also prepare prisoners to encrypt such messages, using talk-around code words or phrases as substitutes for sensitive, classified, or critical information. Thus, “mbf” might be a pre-agreed substitute term for “my big friend,” a helicopter search and rescue operator, known in Western military circles as a “Jolly Green Giant” unit. Frequent use of the same talk-around code can easily be detected and broken by a prisoner's captors.</p>&#13;
<p id="c07-para-0022">Why this code and not Morse code? The long and short sounds (dash and dot) of Morse would require somehow banging out two different, easily distinguishable sounds. This is probably a lot harder to do in captivity than the simple sequences of the same sound or signal pulse.</p>&#13;
</section>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
<p id="c07-para-0023">By contrast, “keeping it safe and secret” requires us to take our ideas, encoded as plaintext (or cleartext) and somehow hide their real meaning from those we do not wish to see or understand. This is where cryptography comes into play.</p>&#13;
<p id="c07-para-0024"><i>Encryption</i> is the process of taking a message written in one set of symbols (and its syntax and semantics) and hiding or obscuring its meaning by changing the way the message is written. <i>Decryption</i> is then the process of unobscuring or revealing the meaning of an encrypted message and restoring it so that its original meaning is intact and revealed. The original <i>plaintext</i> message or information is encrypted into <i>ciphertext</i>, which is then decrypted back to its plaintext form and meaning.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3"><span id="c07-fea-0003"/>&#13;
<h3 id="head-2-111">Plaintext or Cleartext?</h3>&#13;
<section><span id="c07-sec-0006"/>&#13;
<p>Depending upon where you look, these terms can either mean the same thing or have different meanings:</p>&#13;
<ul class="square" id="c07-list-0003">&#13;
<li id="c07-li-0014">Plaintext is the original, unencrypted form of the data, in a form where its meaning or value is readily apparent. Whether it is human-readable characters or binary object code, plaintext is the data that we ultimately use. (This meaning will be used throughout this chapter.)</li>&#13;
<li id="c07-li-0015"><span epub:type="pagebreak" id="Page_354" role="doc-pagebreak" aria-label="354"/>Cleartext can either mean (a) plaintext or (b) data that is never intended to be transmitted, stored, or used in anything but an unencrypted form with its meaning and value available to anyone to read.</li>&#13;
</ul>&#13;
<p id="c07-para-0026">This distinction between data that we must protect, and data that is always “in the clear,” is important. For example, the name of a business (like IBM or Microsoft) would always be cleartext (able to be read and recognized) on websites.</p>&#13;
<p id="c07-para-0027">Note that you'll often see these terms—and many other information security terms—written in hyphenated form, as single words, or as compound nouns. This minor inconsistency can show up across many different documentation products in your organization. Don't let it throw you.</p>&#13;
<p id="c07-para-0028">As an SSCP, be aware of how the other information security team members in your organization may use these terms…with or without a hyphen.</p>&#13;
</section>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
<p id="c07-para-0029"><i>Cryptographic algorithms</i> are the formal definition of the processes we use to encrypt plaintext into ciphertext and then decrypt ciphertext back to plaintext. In many cases, these algorithms require a set of control parameters, such as seeds, salts, keys, block size, and cycle or chain (iteration) values, all of which we'll look at in detail later. Both sender and (intended) receiver must agree to use a mutually consistent set of algorithms and control parameters if they are to successfully use cryptographic processes to send and receive information.</p>&#13;
<p id="c07-para-0030"><a href="#c07-fig-0001" id="R_c07-fig-0001">Figure 7.1</a> shows these basic concepts of encoding, decoding, encrypting, and decrypting in action. Many details are missing from this basic picture, which we'll cover in a bit.</p>&#13;
<figure> <img alt="Schematic illustration of the basics of encoding, encrypting, decrypting, and decoding" src="Images/c07f001.png" class="center" width="1532" height="796"/>&#13;
<figcaption>&#13;
<p><span class="figureLabel"><a href="#R_c07-fig-0001" id="c07-fig-0001" role="doc-backlink">FIGURE 7.1</a></span> The basics of encoding, encrypting, decrypting, and decoding</p>&#13;
</figcaption>&#13;
</figure>&#13;
<p id="c07-para-0031"><span epub:type="pagebreak" id="Page_355" role="doc-pagebreak" aria-label="355"/>At its heart, all cryptography uses either substitution or transposition (or a combination of both) to take the input plaintext and rewrite it in a different set of symbols so that its meaning is hidden. Simple substitution encrypts by replacing every occurrence of one symbol in the plaintext with its cipher value (from a table); the symbols can be individual letters, digits, short fixed-length strings of characters, or entire words. Decryption takes each symbol in the ciphertext and uses the same table to look up its plaintext value. Transposition changes the order of symbols in the plaintext message (as in the scytale cipher used in ancient Greece). Substitution and transposition are illustrated in <a href="#c07-fig-0002" id="R_c07-fig-0002">Figure 7.2</a>.</p>&#13;
<figure> <img alt="Schematic illustration of Substitution and transposition" src="Images/c07f002.png" class="center" width="1475" height="851"/>&#13;
<figcaption>&#13;
<p><span class="figureLabel"><a href="#R_c07-fig-0002" id="c07-fig-0002" role="doc-backlink">FIGURE 7.2</a></span> Substitution and transposition</p>&#13;
</figcaption>&#13;
</figure>&#13;
<p id="c07-para-0032">Substitution and transposition are often done in a series of steps to help make the encryption harder to break. Classical encryption used elements of natural languages—letters, words, and even sentence fragments—as the units to substitute and transpose. Modern cryptography uses advanced concepts in mathematics to first treat the plaintext as if it were a series of numbers and then applies much more complex techniques to compute the corresponding ciphertext value, rather than just look it up in a table. The key (if you pardon the pun) is in how each cryptographic system defines its rules for doing this.</p>&#13;
<p id="c07-para-0033">Notice that a vital element of encryption and decryption is that the original meaning of the plaintext message is returned to us—encrypting, transmitting, and then decrypting it did not change its meaning or content. The ciphertext version of information can be used as a signature of sorts—a separate verification of the authenticity or validity of the plaintext version of the message. Digital signatures use encryption techniques to provide this separate validation of the content of the message, file, or information they are associated with.</p>&#13;
<p id="c07-para-0034">Finally, we can define what cryptography is! <i>Cryptography</i> is the art and science of transforming plaintext information by means of suitable encryption techniques into <span epub:type="pagebreak" id="Page_356" role="doc-pagebreak" aria-label="356"/>ciphertext, which can then be decrypted back into matching plaintext. What we <i>use</i> cryptography for is not part of the definition, nor should it be.</p>&#13;
<p id="c07-para-0035">A <i>cryptographic system</i> is the sum total of all the elements we need to make a specific application of cryptography be part of our information systems. It includes the algorithm for encrypting and decrypting our information; the control parameters, keys, and procedural information necessary to use the algorithm correctly and any other specialized support hardware, software, or procedures necessary to make a complete solution.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3"><span id="c07-fea-0004"/>&#13;
<h3 id="head-2-112">A Sidebar on Sets and Functions</h3>&#13;
<section><span id="c07-sec-0007"/>&#13;
<p id="c07-para-0036">The simple concepts of sets and functions make cryptography the powerful concept that it is. As an SSCP, you should have a solid, intuitive grasp of both of these ideas. The good news? As a human being, your brain is already 90% of the way to where you need to go!</p>&#13;
<p id="c07-para-0037"><i>Sets</i> provide for grouping of objects or items based on characteristics that they have in common. It's quite common to represent sets as Venn diagrams, using nested or overlapping shapes (they don't always have to be circles). In the following figure, part (a) shows an example of proper subsets—one set is entirely contained within the one outside it—and of subsets, where not all members of one set are part of another (they simply overlap). Part (b) of the figure shows a group of people who've earned one or more computer security-related certifications; many only hold one, some hold two, and a few hold all three, as shown in the overlapping regions. If a subset contains all elements of another subset, it is called an <i>improper subset</i>.</p>&#13;
<figure> <img alt="Schematic illustration of (A) an example of proper subsets, (B) an example of Proper Subsets, and (c) Mapping One Set to Another" src="Images/c07uf001.png" class="center" width="1553" height="551"/>&#13;
</figure>&#13;
<p><i>Functions</i> are mathematical constructs that apply a given set of operations to a set of input values, producing an output value as the result. We write this as</p>&#13;
<p id="c07-para-0039"><i>f(x) = y</i> or <i>f(x)</i> → <i>y</i></p>&#13;
<p id="c07-para-0040">The second form, written as a production function, shows that by applying the function <i>f</i> to the value <i>x</i>, we <i>produce</i> the value <i>y</i>.</p>&#13;
<p id="c07-para-0041"><span epub:type="pagebreak" id="Page_357" role="doc-pagebreak" aria-label="357"/>Note that for any given value of <i>x</i>, there can be only one <i>y</i> as a result.</p>&#13;
<p id="c07-para-0042">One powerful application of functions is to consider them as mapping one set to another. The previous function says that the set of all values of <i>x</i> is mapped to the set <i>y</i>. This is shown in part (c) of the figure, which shows how a list of out-of-limit conditions is mapped to a list of alarms. (This looks like a table lookup function.) If you wanted any of a set of conditions to trigger the same alarm, you wouldn't use a function; you'd end up with something like the “check engine” light in automobiles, which loses more meaning than it conveys!</p>&#13;
<p id="c07-para-0043">Not all mappings have to map every element of the source set into the destination set, nor do they use every element in the destination; some of these pairs (<i>x</i>,<i>y</i>) are just undefined. For example, the division function <i>f(x) = y/x</i> is undefined when <i>x</i> = 0 but not when <i>y</i> = 0.</p>&#13;
<p id="c07-para-0044">This is just a brief refresher on sets and functions. You'll need to be acquainted with these concepts as an SSCP and as you prepare for the exam.</p>&#13;
</section>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
</section>&#13;
<section><span id="c07-sec-0008"/>&#13;
<h3 id="head-3-136">Cryptography, Cryptology, or…?</h3>&#13;
<p id="c07-para-0045">There are many different names for very different aspects of how we study, think about, use, and try to crack “secret writing” systems. Some caution is advised, and as an SSCP you need to understand the context you're in to make sure you're using the right terms for the right sets of ideas.</p>&#13;
<p>For example, as Wikipedia and many others point out, a lot of people, agencies, and academics use the terms <i>cryptography</i> and <i>cryptology</i> interchangeably, as if they mean the same things. Within the U.S. military and intelligence communities, however:</p>&#13;
<ul class="square" id="c07-list-0004">&#13;
<li id="c07-li-0016"><i>Cryptography</i> refers specifically to the use and practice of cryptographic techniques.</li>&#13;
<li id="c07-li-0017"><i>Cryptanalysis</i> refers to the study of vulnerabilities (theoretical or practical) in cryptographic algorithms and systems and the use of exploits against those vulnerabilities to break such systems.</li>&#13;
<li id="c07-li-0018"><i>Cryptology</i> refers to the combined study of cryptography (the secret writing) and cryptanalysis (trying to break other people's secret writing systems or find weaknesses in your own).</li>&#13;
<li id="c07-li-0019"><i>Cryptolinguistics</i>, however, refers to translating between human languages to produce useful information, insight, or actionable intelligence (and has little to do with cryptography).</li>&#13;
</ul>&#13;
<p id="c07-para-0047">You may also find that other ways of hiding messages in plain sight, such as steganography, are sometimes included in discussions of cryptography or cryptology.</p>&#13;
<p id="c07-para-0048">Note, though, that cryptograms are not part of this field of study or practice—they are games, like logic puzzles, which present ciphers as challenges to those who want something more than a crossword puzzle to play with.</p>&#13;
</section>&#13;
</section>&#13;
<section aria-labelledby="head-2-113"><span id="c07-sec-0009"/>&#13;
<h2 id="head-2-113">Building Blocks of Digital Cryptographic Systems</h2>&#13;
<p id="c07-para-0049"><span epub:type="pagebreak" id="Page_358" role="doc-pagebreak" aria-label="358"/>Digital systems represent all information as a series of numbers; by contrast, analog systems represent information as a continuously variable physical value. When you make a voice-over-IP (VOIP) call, the sender's speech (and background sounds) must be transformed from the digital form sent over the Internet into acoustic waves in the air that your ears can detect and process; the signal fed into that acoustic device (the headphone) is an analog electrical wave. There are many ways to encrypt and decrypt analog signals—which we won't go into here, since they're beyond what most of us in computing and networking ever encounter. (They're also well beyond the scope of the SSCP's job or the exam.) So we'll confine our studies to digital information systems and the cryptographic techniques that work with them.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3"><span id="c07-fea-0005"/>&#13;
<p><img alt="Realworld" src="Images/realworld.png" class="left" width="239" height="36"/></p>&#13;
<h3 id="head-2-114">Identifying Cryptographic Needs in E-Voting</h3>&#13;
<section><span id="c07-sec-0010"/>&#13;
<p id="c07-para-0050">In previous chapters we've looked at e-voting, online voter registration, and related processes as ways to sharpen our skills as SSCPs. Let's continue with these important civic systems by taking on their cryptographic needs.</p>&#13;
<p id="c07-para-0051">Recall that the basic process flow is that citizens first apply to register to vote; once their identity is authenticated, they are entered into the voter rolls for their local, regional, and national election commission. When an election is to be held, those rolls must be transferred to individual polling stations for use in validating that only properly registered voters can vote.</p>&#13;
<p>Considering your own experiences as a citizen and voter, and as an SSCP, think about the following questions:</p>&#13;
<ol class="decimal" id="c07-list-0005">&#13;
<li id="c07-li-0020">What kind of events in your life would cause your voter registration information to change and hence require an update prior to the next election?</li>&#13;
<li id="c07-li-0021">How can the information you initially provide, and any updates to it, be provided in ways that are self-authenticating? What does this require of the originators of that information?</li>&#13;
<li id="c07-li-0022">Which other individuals or government offices need to see, use, process, or manipulate the information you provide to prove your identity and residence?</li>&#13;
<li id="c07-li-0023">Which other individuals or government offices only need to know that you are legitimately registered as a voter?</li>&#13;
</ol>&#13;
<p id="c07-para-0053"><span epub:type="pagebreak" id="Page_359" role="doc-pagebreak" aria-label="359"/>Now, build a use case or user story that shows how the information about you is created, authenticated, shared, stored, used, and then destroyed as you and your information travel through the registration process. Use this document to help you identify users or functions (as in question 3) who need to know that you are you and do not have access to the details of that proof.</p>&#13;
<p id="c07-para-0054">How might you see this use case or user story leading to your recommendations to use cryptographic solutions for parts of the voter registration and e-voting needs of your society?</p>&#13;
</section>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
<p>All digital cryptographic systems embody certain basic concepts, albeit in many different ways. We start with defining how they will process the input plaintext, and this has to take the use of the plaintext into account:</p>&#13;
<ul class="square" id="c07-list-0006">&#13;
<li id="c07-li-0024"><i>Character or symbol ciphers</i> use individual symbols in the plaintext as the unit to encrypt and decrypt, much like the simple, classical substitution and transposition ciphers did.</li>&#13;
<li id="c07-li-0025"><i>Block ciphers</i> take the input plaintext as a stream of symbols and break it up into fixed-length blocks; each block is then encrypted and decrypted as if it was a single (larger) symbol. A block of 64 bits (8 eight-bit bytes) can be thought of as a 64-digit binary number, which is what the encryption algorithm would then work on. Block ciphers typically have to pad the last block of a fixed-length plaintext message (such as a file or an email) so that each block has the required length.</li>&#13;
<li id="c07-li-0026"><i>Stream ciphers</i> are symmetric encryption processes that work on a single byte (sometimes even a single bit!) of plaintext at a time, but they use a pseudorandom string (or <i>keystream</i>) of cipher digits to encrypt the input plaintext with. Stream ciphers typically use simple operations, such as <i>exclusive-or</i>, to encrypt each bit or byte. These operations run very fast (perhaps each encryption taking a few nanoseconds). Stream ciphers by design can work on any length of input plaintext. The keystream generator is a function (implemented in hardware, software, or both) that uses a seed value (the encryption key itself) as input, producing encryption values to be combined with each bit or byte of the input plaintext. Stream ciphers like RC4 find widespread use in mobile communications systems such as cell phones, Wi-Fi, and others, in which the plaintext input is often of unbounded length.</li>&#13;
</ul>&#13;
<section><span id="c07-sec-0011"/>&#13;
<h3 id="head-3-137">Cryptographic Algorithms</h3>&#13;
<p id="c07-para-0056">A <i>cryptographic algorithm</i> defines or specifies a series of steps—some mathematical, some logical, some grouping or un-grouping of symbols, or other kinds of operations—that must be being applied, in the specified sequence, to achieve the required operation of the system. Think of the algorithm as the total set of swap rules that you need to use, <i>and the correct order to apply those rules in</i>, to make the cryptographic system work properly. <span epub:type="pagebreak" id="Page_360" role="doc-pagebreak" aria-label="360"/>(Note, too, that we sometimes use <i>cryptographic algorithm</i> and <i>encryption algorithm</i> as interchangeable terms.) We mentioned before that the basic processes of substitution and transposition can be repetitively or iteratively applied in a given cryptographic process. The <i>number of rounds</i> that an algorithm iterates over is a measure of this repetition. A combination of hardware and software features can implement this repetition.</p>&#13;
<p>Encryption and decryption processes can suffer from what we call a <i>collision</i>, which can render them unusable. This can occur if one of the following happens:</p>&#13;
<ul class="square" id="c07-list-0007">&#13;
<li id="c07-li-0027">Two different plaintext phrases should not map (encrypt) to the same ciphertext phrase; otherwise, you lose the difference in meaning between the two plaintext phrases.</li>&#13;
<li id="c07-li-0028">Two different ciphertext phrases should not map (decrypt) to the same plaintext phrase; otherwise, you have no idea which plaintext meaning was intended.</li>&#13;
</ul>&#13;
<p id="c07-para-0058">As a case in point, consider translating from English into Spanish and back again. The English language uses two distinct words, <i>safety</i> and <i>security</i>, to refer to two very different but related set of ideas. Both safety and security are about preventing injury, damage, or other loss, but (as you saw in <a href="c02.xhtml">Chapter 2</a>, “Information Security Fundamentals”) they each approach different aspects of systems design and use. In Spanish, a single word—<i>seguridad—</i>encompasses both ideas. Encrypting an English sentence that uses both <i>safety</i> and <i>security</i> into Spanish, and then translating the resultant Spanish sentence back into English, would probably lose what English-speaking SSCPs consider as the important distinction between safety and security.</p>&#13;
<p id="c07-para-0059">Virtually all cryptographic algorithms perform such a substitution—they replace a symbol, word, or phrase in the plaintext set with a corresponding element in the ciphertext set—our choice of algorithm has to take this potential for collision into account. The details of how this is done is beyond the scope of this book or the SSCP exam, but as an SSCP, you need to be aware that no matter what algorithm your system is using, it has its limits.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0012"/>&#13;
<h3 id="head-3-138">Cryptographic Keys</h3>&#13;
<p>Cryptographic keys provide the “secret sauce” that makes a cryptographic algorithm work. Typically, other algorithms (that are part of the overall cryptographic system) are used to generate new key values. Many things have been used throughout history as a source of keys:</p>&#13;
<ul class="square" id="c07-list-0008">&#13;
<li id="c07-li-0029">Published books, such as a specific edition of Shakespeare's <i>Romeo and Juliet</i>, <i>Caesar's Commentaries</i>, or even holy scriptures can provide a lookup table for either substitution or transposition operations. Bob, for example, could use such a book to encrypt a message by starting on a pre-agreed page, substituting the first letter in his plaintext for the first letter of the first line on the page. Carol would decrypt his message by using the same print edition of the book and go to the same pre-agreed page.</li>&#13;
<li id="c07-li-0030"><i>One-time pads</i> are a variation of using published books (and predate the invention of movable type). The key generator writes out a series of key words or phrases, one per sheet of paper, and makes only one copy of this set of sheets. Carol encrypts her message <span epub:type="pagebreak" id="Page_361" role="doc-pagebreak" aria-label="361"/>using the first sheet in the one-time pad <i>and then destroys that sheet</i>. Alice decrypts the ciphertext she receives from Carol using that same sheet and then destroys that sheet.</li>&#13;
<li id="c07-li-0031"><i>Pseudorandom numbers</i> of various length are also commonly used as keys. Senders and recipients each have a copy of the same pseudorandom number generator algorithm, which uses a seed value to start with. A sequence of pseudorandom numbers from such an algorithm provide either a one-time pad of encryption keys, or a keystream for stream cipher use.</li>&#13;
<li id="c07-li-0032">Hardware random number generators, combined with software functions, can also generate keys or keystreams. The latest of these use quantum computing technologies to generate unique keystreams.</li>&#13;
</ul>&#13;
<p id="c07-para-0061">We choose a cryptographic solution based in part on the degree of security or strength of protection that we need, for a given system and application. The chosen algorithm and the way in which it is implemented (in hardware, software, and operational procedures) is part of achieving that strength; choosing the right key, or the right key size, is the other major component. We talk about the <i>key strength</i> as a way to measure or assert how much effort would be required to break (illicitly decrypt) a cleartext message encrypted by a given algorithm using such a key. In most cases, this is directly related to the key size, defined as how many bits make up a key. Another way to think of this is that the key strength determines the size of the <i>key space</i>—the total number of values that such a key can take on. Thus, an 8-bit key can represent the decimal numbers 0 through 255, which is like saying that an 8-bit key space has 256 unique values in it. SSL uses a 256-bit key as its session key (to encrypt and decrypt all exchanges of information during a session), which would mean that someone trying to brute force crack your session would need to try 2<sup>256</sup> possible values (that's a 78-digit base-10 number!) of a key to decrypt packets they've sniffed from your session. With 1 million zombie botnet computers each trying a million key values per second, they would still need 10<sup>59</sup> <i>years</i> to go through all values. (If you're thinking of precomputing all such values, how many petabytes might such a <i>rainbow table</i> take up?)</p>&#13;
<p id="c07-para-0062"><i>Key distribution and management</i> become the biggest challenges in running almost any cryptographic system. <i>Keying material</i> is a term that collectively refers to all materials and information that govern how keys are generated and distributed to users in a cryptographic system, and how those users validate that the keys are legitimate. <i>Key management</i> processes govern how long a key can be used and what users and systems managers must do if a key has been compromised (presumably by falling into the wrong hands). <i>Key distribution</i> describes how newly generated keys are issued to each legitimate user, along with any updates to the rules for their period of use and their safe disposal. Consider the three typical topologies from a key distribution and management perspective. The simple one-time pad system connects only two users; only one pair of pads is needed. Most real-world needs for secure communication require much larger sets of users, however. For a given set of <i>n</i> users, the star topology requires <i>n</i> pairs of keys to keep traffic between each user and the central site secure and private—from all other users as well as from outsiders. A full-mesh system requires (<i>n</i>(<i>n</i> – 1)) sets of keys to provide unique and secure communication for each pair of users on this mesh.</p>&#13;
<p id="c07-para-0063">The term <i>cryptographic protocols</i> can refer to two different sets of processes and techniques. The first is the use of cryptography itself in the operation of a cryptographic system, which typically can refer to key management and key distribution techniques. The second <span epub:type="pagebreak" id="Page_362" role="doc-pagebreak" aria-label="362"/>usage refers to the use of cryptographic systems and techniques to solve a particular problem. Secure email, for example, can be achieved in a variety of ways using different protocols, each of which uses different cryptographic techniques. We'll look at these more closely later in this chapter.</p>&#13;
<p id="c07-para-0064">One more term we can define: a <i>cryptographic module</i> (according to Federal Information Processing Standards [FIPS] publication 140) is any combination of hardware, firmware, or software that implements cryptographic functions. What's interesting about FIPS 140 is that it directly addresses the security of an information systems supply chain with respect to its cryptographic elements. To earn certification as a cryptographic module, vendors must submit their works to the Cryptographic Module Validation Program (CMVP) for testing.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0013"/>&#13;
<h3 id="head-3-139">Hashing as One-Way Cryptography</h3>&#13;
<p id="c07-para-0065">Hashing provides a way to take a very large set of expressions (messages, names, values, etc.) and map them down to a much smaller set of values. A good example of this is the Dewey Decimal Classification (DDC) system used in libraries, which gives librarians a reasonably uniform way to put nonfiction books on the shelves <i>and</i> makes it easy for patrons to find what they want. First created in 1873 and now maintained by the Library of Congress in the United States, this system assigns nonfiction subject areas to numbers from 000 to 999, with as many extra digits to the right of the decimal point as might be needed. For example, the 500 series holds all the natural science and mathematics subjects; 510 is the mathematics subset, and within that 516 is geometry, and so on. Once the main subject matter of a book is determined, its Dewey Decimal number can be assigned. Note that there might be thousands of books that all fit within a single DDC number like 516; 10 books on exactly the same subject (fundamental concepts of analytic geometry, for example) would all have the same Dewey Decimal number. Libraries were in existence long before we had digital computers, and they have often had such a large set of possible values of book <i>subjects</i> that they had to map (“show where to put them”) to a space-constrained set of physical bookshelves. As businesses started to use automated information systems (such as punched cards) to maintain parts lists and inventories, this concept was reinvented and tailored to industry's needs.</p>&#13;
<p id="c07-para-0066">Hashing provides many advantages in information systems design that stem from its ability to uniquely generate a numeric value that can represent arbitrary alphanumeric data (such as individual names or street addresses, part numbers, or drug names). These hash values can be stored in tables as relative offsets or pointers into very large files, eliminating the need to read every record to see if it's the one you actually need to use. Hashing the entire contents of a file produces a long-form error detection and correction code by reapplying the hash function and comparing that resultant hash value to the one stored with the file; a mismatch indicates the file may have been corrupted or changed. These are sometimes called <i>digital fingerprints</i> or <i>checksums</i> when used to detect (and possibly correct) errors in file storage or transmission. Hashing can also be applied to an entire message, producing a secure message hash or message digest. Since messages are typically of variable length, the message digest is fixed length, which makes them easy to use in file systems, communications systems, and security systems.</p>&#13;
<section><span id="c07-sec-0014"/>&#13;
<h4 id="head-4-70">Hash Algorithm Basics</h4>&#13;
<p><span epub:type="pagebreak" id="Page_363" role="doc-pagebreak" aria-label="363"/>Hash algorithms transform the long key into a hash key or short key, where the long keys can be drawn from some arbitrarily large set of values (such as personal names) and the short key or hash key needs to fit within a more constrained space. The hash key, also called the hash, the hash value, the hash sum, or other term, is then used in place of the long key as a pointer value, an index, or an identifier. Two main properties of hash functions are similar to those of a good encryption function:</p>&#13;
<ul class="square" id="c07-list-0009">&#13;
<li id="c07-li-0033">The hash function must be one way: there should be no computationally feasible way to take a hash value and back-compute or derive the long key from which it was produced.</li>&#13;
<li id="c07-li-0034">The hash function must produce unique values for all possible inputs; it should be computationally infeasible to have two valid long keys as input that produce the same hash value as a result of applying the hash function.</li>&#13;
</ul>&#13;
<p id="c07-para-0068">Compare these two requirements with the two main requirements for any kind of encryption system, which we do in <a href="#c07-fig-0003" id="R_c07-fig-0003">Figure 7.3</a>. Notice that both hashing and encryption must be one-to-one <i>mappings</i> or <i>functions</i>—no two input values can produce the same output value. But encryption <i>must</i> be able to decrypt the ciphertext back into one and only one plaintext (the identical one you started with!); if it can't, you're hashing, aren't you?</p>&#13;
<figure> <img alt="Schematic illustration of Comparing hashing and encryption as functions" src="Images/c07f003.png" class="center" width="1360" height="752"/>&#13;
<figcaption>&#13;
<p><span class="figureLabel"><a href="#R_c07-fig-0003" id="c07-fig-0003" role="doc-backlink">FIGURE 7.3</a></span> Comparing hashing and encryption as functions</p>&#13;
</figcaption>&#13;
</figure>&#13;
<p id="c07-para-0069">Like encryption algorithms, hash algorithms need to deal with <i>collisions</i> (situations where two different long key inputs can hash to the same hash value). These are typically addressed with additional processing stages to detect and resolve the collision.</p>&#13;
<p id="c07-para-0070">Hash algorithms may make use of a salt value to initialize the calculations. This is typically a random (well, pseudorandom) value that is included with the input long key; if the <span epub:type="pagebreak" id="Page_364" role="doc-pagebreak" aria-label="364"/>hash algorithm is dealing with a 256-byte long key, a two-byte salt value effectively has the algorithm work on 258 bytes. This offers significant protection against rainbow table or dictionary-based attacks on hashes by making the attacker have to precompute a significantly larger table of hashed values. (We'll look at this more when we examine vulnerabilities, attacks, and defenses.)</p>&#13;
<p id="c07-para-0071">A number of published standards define secure hash functions for use in various kinds of information security systems. The SHA series of Secure Hash Algorithms, published by the NSA, is one such series; the original SHA-0 and SHA-1 standards have been shown to be vulnerable to collision attacks and are being disbanded for use with SSL.</p>&#13;
<p id="c07-para-0072">The details of how hashing functions work internally is beyond the scope of this book and typically not something an SSCP would need to know about on the job (or for the exam).</p>&#13;
</section>&#13;
<section><span id="c07-sec-0015"/>&#13;
<h4 id="head-4-71">Pseudorandom and Determinism</h4>&#13;
<p id="c07-para-0073">The science of probability gives us a strong definition of what we mean by <i>random</i>. A random event is one whose outcome cannot be determined in advance with 100% certainty. Flipping a perfect coin or rolling a perfect pair of dice are good examples—in which <i>perfect</i> means that no one has tampered with the coin or the dice and the way that they are flipped, rolled, or tossed offers no means of controlling where they land and come to rest with the desired outcome showing. One hundred perfect tosses of a perfect coin will produce 100 random outcomes (heads or tails) for that sequence of 100 events. But despite our intuition as gamblers and humans, the fact that 100 heads have been flipped in a row has no bearing whatsoever on what the outcome of the next flip will be as long as we are perfectly flipping a perfect coin. So the sequence of outcomes is said to have a random distribution of values—any one value has the same likelihood of occurring at any place in the sequence.</p>&#13;
<p id="c07-para-0074">In computing, it is difficult to compute purely random numbers via software alone. Specialized hardware can, for example, trigger a signal when a cosmic ray hits a detector, and these natural events are pretty close to being perfectly randomly distributed over time. The beauty of computing is that once you write an algorithm, it is <i>deterministic</i>—given the same input and series of events, it always produces the same result. (Think what it would mean if computers were <i>not</i> deterministic!)</p>&#13;
<p id="c07-para-0075">If we look at a very large set of numbers, we can calculate the degree of statistical randomness that set represents. There are lots of ways to do this, which are (blissfully!) well beyond the scope of what SSCPs need in the day-to-day of their jobs. If we use a deterministic algorithm to produce this set of numbers, using a seed value as a key input, we call such sets of numbers <i>pseudorandom</i>: the set as a whole exhibits statistical randomness, but given the <i>n</i>th value of the sequence and knowing the algorithm and the seed, the next element of the sequence—the (<i>n</i> + 1)th value—can be determined. (You can visualize this by imagining what happens when you drop a family-sized container of popcorn across your dark blue living room carpet. It's incredibly difficult to precompute and predict where each bit of popcorn will end up; but look at the patterns. A spray pattern would reveal that you threw the container across the room while standing in one location; other patterns might indicate a stiff breeze was coming in through the windows or the doorway, or that you <span epub:type="pagebreak" id="Page_365" role="doc-pagebreak" aria-label="365"/>lofted the container upward rather than waved it about in a side-to-side way. A purely random popcorn spill would not have any patterns you could detect.)</p>&#13;
<p id="c07-para-0076">Modern operating systems use such pseudorandom number generators for many purposes, some of which involve encryption of identity and access control information. In 2007, it was shown that the CryptGenRandom function in Windows 2000 was not so random after all, which led to exploitable vulnerabilities in a lot of services (such as Secure Socket Layer) when supported by Windows 2000. The math behind this claim is challenging, but the same pseudorandom number generator was part of Windows XP and Vista.</p>&#13;
<p id="c07-para-0077"><i>Entropy</i> is a measure of the randomness of a system; this term comes from thermodynamics and has crossed over into software engineering, computer science, and of course cryptography. A simple Web search on “entropy and cryptography” will give you a taste of how rich this vein of ideas is.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3"><span id="c07-fea-0006"/>&#13;
<p><img alt="Realworld" src="Images/realworld.png" class="left" width="239" height="36"/></p>&#13;
<h3 id="head-2-115">Digital Identification?</h3>&#13;
<section><span id="c07-sec-0016"/>&#13;
<p id="c07-para-0078">It might be argued that a national identification system could take all of the data about <i>you</i> and hash it down into a suitably long hash value—your “ID number,” so to speak. Clearly, this would not be something you'd memorize—you'd have to present some digital form of it, which could then be (somehow) validated as (a) being on file in an authoritative place, and (b) actually matching the person presenting it.</p>&#13;
<p id="c07-para-0079">Suppose you are part of a team asked to implement such a system. What key considerations might you need to address? What design assumptions might you have to make? Is a “simple” cryptographic hash of all of your PII, including biometrics, going to be sufficient and effective? Why or why not?</p>&#13;
</section>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
</section>&#13;
</section>&#13;
<section><span id="c07-sec-0017"/>&#13;
<h3 id="head-3-140">A Race Against Time</h3>&#13;
<p id="c07-para-0080">You need it kept safe and secret. For how long?</p>&#13;
<p id="c07-para-0081">In general, organizations incur one-time costs to produce a set of information; ongoing costs to store it and keep it safe and secure; and disposal costs when the information has finally outlived its useful life. At the end of that useful life, however, that information could still harm your business if it fell into the wrong hands. As an example, consider a local police department's detectives, who rely on various informers to help them build successful cases against suspected criminals. When too much time has gone by, a cold case cannot be brought to prosecution, but if the identity of those informants is inadvertently disclosed, they could be at significant risk of retaliation.</p>&#13;
<p id="c07-para-0082">On the other hand, some information has zero <i>value</i> to you or to others after a certain point in time. New product or marketing plans, for example, need to be kept confidential up until the product is released to the marketplace; after that, secrecy no longer adds value or reduces risk to the company's new products or plans.</p>&#13;
<p id="c07-para-0083"><span epub:type="pagebreak" id="Page_366" role="doc-pagebreak" aria-label="366"/>Think back to what we saw earlier about the key strength of a cryptographic system. If it takes billions and billions (and more billions!) of years to try all values of a 256-bit key, how then can we ever say that cyber <i>defense</i> has to be lucky all of the time while the criminal hacker has to be lucky only once? More to the point, since the first 256-bit key was put into general use, we've seen key lengths increased to 512-, 1024-, and even 2048-bit lengths. If it takes longer than the lifetime of the universe for an attacker to try every possible key, why isn't that good enough? If all that an attacker can do is a brute force attack—sequentially trying each possible key—then it's purely a matter of chance whether they succeed with the first such trial key or the last one. But attackers are not limited to just plain brute force means. Without getting too mathematically rigorous, several factors conspire to make the useful lifetime of any given key length be just a few years and not centuries. First, of course, is that the pseudorandomness in the numbers used as control parameters narrows the key space to a fraction of its hypothetical size. Next, all algorithms have weaknesses in them that can be exploited to narrow that search space even further. Finally, <i>dumb luck</i> can and often does triumph over the skill and cunning of cryptosystems designers.</p>&#13;
<p id="c07-para-0084">We must consider that it is still often easier to steal or surreptitiously copy the keys in use by a target's cryptosystems than it is to attempt to crack them. And recent surveys by (ISC)<sup>2</sup>, the EC-Council, and others demonstrate that social engineering is the root cause of most information security systems breaches. Social engineering could, for example, reveal exploitable weaknesses in the way your organization uses cryptography, how it generates and manages keys, or how it responds when keys are compromised.</p>&#13;
<p>This brings us to an important consideration, which we might sum up as follows. There are two kinds of cryptographic keys in this world: those that have been compromised and those that haven't yet been compromised.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3">&#13;
<h3><img alt="Note" src="Images/note.png" class="left" width="76" height="53"/> </h3>&#13;
<p id="c07-para-0086">The Colonial Pipeline ransomware attack made headlines in 2021, especially when the $4.5 Million USD ransom paid in Bitcoin was partially recovered by Federal investigators. They were able to do this by having obtained a copy of the secret key for the attacker's private Bitcoin wallet.</p>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
</section>&#13;
<section><span id="c07-sec-0018"/>&#13;
<h3 id="head-3-141">“The Enemy Knows Your System”</h3>&#13;
<p id="c07-para-0087">Shannon's maxim—“The enemy knows your system”—rather bluntly restates Kerckhoff's principle from 1883. Whether by burglary, spies, analysis, or just dumb luck, Kerckhoff first summed up the growing sense of mathematicians and cryptographers by saying that the secrecy of the messages—the real secrets you want to protect—cannot depend on keeping your cryptographic system and its algorithms and protocols secret. The one thing that determines whether your secrets are safe is the strength of the cryptographic key that you use. If this key can be guessed, reversed-engineered from analysis of your ciphertext, stolen, or otherwise compromised, your secrets become known to the attacker.</p>&#13;
<p id="c07-para-0088">This leads inexorably to key management—the processes we use to generate, distribute, and use cryptologic keying materials, and how we retire them from use and destroy them.</p>&#13;
</section>&#13;
</section>&#13;
<section aria-labelledby="head-2-116"><span id="c07-sec-0019"/>&#13;
<h2 id="head-2-116">Keys and Key Management</h2>&#13;
<p id="c07-para-0089"><span epub:type="pagebreak" id="Page_367" role="doc-pagebreak" aria-label="367"/>From the first uses of cryptography in ancient times, up until the middle 1970s, virtually all cryptologic systems depended on physically transporting keying materials from their point of origination to each user. Paper lists, books, punched paper tape, programmable read-only memory chips, and many other technologies have been used to record the values of the keys and the parameters that determine how those keys would be used. The physical security measures necessary to keep keying materials from going astray or falling into the wrong hands have had to be quite stringent, and despite this, many famous examples of espionage involve the surreptitious copying or theft of keying materials. Prudence dictates that keys be changed frequently, simply because it is comparatively easy to bribe, blackmail, or steal one's way to a copy of a set of keys; similarly, prudence suggests that using your encrypted communications systems to transmit the next set of keys is a risk not to be taken lightly.</p>&#13;
<p>Two fundamental principles of security architecture and design are at work in most key management processes.</p>&#13;
<ul class="square" id="c07-list-0010">&#13;
<li id="c07-li-0035"><i>Separation of duties</i> is used to limit how much of the cryptosystem's operation and use, as well as the traffic it is protecting, can be accessed or altered by any one individual or by a node in the overall system.</li>&#13;
<li id="c07-li-0036"><i>Split knowledge</i> is also used to take highly sensitive information about the system and divide it up, issuing pieces of it to individual operators or nodes, who must all cooperate and combine their partial knowledge together in controlled ways to unlock critical systems functions.</li>&#13;
</ul>&#13;
<p id="c07-para-0091">Many nations, their military and intelligence services, and private businesses have wrestled with this problem. Pre-positioning several sets of keying material at all user sites does allow for a short “change keys” broadcast message or a similar message that overrides the default key change schedule. In doing so, this puts multiple sets of keys (today's, next week's, etc.) at risk of loss or compromise.</p>&#13;
<p id="c07-para-0092">Symmetric encryption algorithms have the greatest challenges with key management and key distribution. Symmetric encryption not only uses the same key (or a simple transform of that key) for encryption and decryption; it also provides no <i>forward secrecy</i>—which means that when (not if!) a key is compromised, that compromised key can always be used to decrypt any ciphertext that was produced with that key.</p>&#13;
<p id="c07-para-0093">As you'll see later, asymmetric encryption still uses keys; those keys still must be protected. And even though you publish your public key (when using hybrid encryption systems and the public key infrastructure for key exchange), your private key still represents the single most important secret that you must keep.</p>&#13;
<section><span id="c07-sec-0020"/>&#13;
<h3 id="head-3-142">Key Storage and Protection</h3>&#13;
<p>For these and other reasons, cryptologic keying materials have to be protected at least as zealously as the secret plaintext they are being used to encrypt. This has often dictated that organizations must do the following:</p>&#13;
<ul class="square" id="c07-list-0011">&#13;
<li id="c07-li-0037">Provide hardened storage containers (safes, vaults, etc.) for the storage of keying material.</li>&#13;
<li id="c07-li-0038">Restrict access to encryption equipment, preventing unauthorized persons from inspecting it and observing its use.</li>&#13;
<li id="c07-li-0039"><span epub:type="pagebreak" id="Page_368" role="doc-pagebreak" aria-label="368"/>Control the manufacture, purchase, shipment, installation, maintenance, movement, and onward disposal of cryptologic equipment and materials.</li>&#13;
<li id="c07-li-0040">Require stringent personnel reliability standards for all persons who can access, use, or deal with cryptologic materials, systems, designs, etc.</li>&#13;
</ul>&#13;
<p id="c07-para-0095">More recently, organizations have invested in <i>hardware security modules</i> (HSMs), which are hardened systems for storage and management of cryptologic assets such as keys and certificates. These enforce shared knowledge and separation of duties as design principles by requiring two or more administrators to take separate near-simultaneous actions to unlock and access HSM features and the assets they protect.</p>&#13;
<p id="c07-para-0096">Despite those precautions, cryptologic materials, keys, and systems have suffered and continue to suffer from disclosure and compromise.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0021"/>&#13;
<h3 id="head-3-143">Key Revocation and Disposal</h3>&#13;
<p id="c07-para-0097">Any cryptographic system has to deal with <i>key revocation</i>—informing all users that a particular key is no longer valid and that it should not continue to be used. This process starts with a decision that a particular key should be revoked—either at a fixed time interval (key expiration schedule) or because a potential or actual incident has occurred that compromises the key in question. Next, a key revocation message must be broadcast to all authorized users of the system of which that key is a component. Each user must then clean house and make sure that the revoked key is removed from operational use and then disposed of in agreed-to ways that will not compromise the integrity of the cryptographic system itself, or put files or messages that had been encrypted with the revoked key at risk of compromise. This usually involves destruction of the keying material, that is, the key itself and any documents, messages, or supporting data included with it during distribution.</p>&#13;
<p id="c07-para-0098">Key revocation often has to happen when a user leaves the network that the cryptologic system services. Users may leave because they are no longer employed or a part of the organization; in wartime, they may be a unit or a location that has or is about to be overrun by the enemy. Keying materials on board aircraft, ships, or in other vessels are also subject to disasters (natural and man-made), which could lead to keying materials being compromised.</p>&#13;
<p id="c07-para-0099"><i>Randomization</i>, somewhat incorrectly referred to as <i>Zeroization</i> (as NSA has been known to call it) is the process by which cryptologic systems are cleared of all keying materials, plaintext, ciphertext, control parameters, and sometimes even their software and firmware. This process serves two main purposes: it restores the device to a clean initial state, and it removes any information that might possibly be used to break the encryption scheme, decrypt previously encrypted messages, or derive the encryption key to use for later decryption of subsequent messages.</p>&#13;
<p id="c07-para-0100">Originally, such a system reset was done by writing zeros into all memory locations, but even in the 1950s, it was known that writing zeros onto magnetic media (or printing pages of zeros on a printer to clean print impressions from the ink ribbon) would not make previous content unreadable. Many randomization techniques were developed and used instead, often tailored to the specific hardware technology that needed to be wiped or cleared.</p>&#13;
<p id="c07-para-0101"><span epub:type="pagebreak" id="Page_369" role="doc-pagebreak" aria-label="369"/>Returning a system (including its cryptographic elements) to a clean initial state is necessary during systems test and development; it's also mandatory when the system is going to be used to process sensitive or classified information for a different user or one at a different level of information classification.</p>&#13;
<p id="c07-para-0102">This leads many secure systems operators to establish routine “clobber” procedures, in which no hardware is damaged but all information, settings, programs, operational logs, and so forth are thoroughly erased from the system, and all systems elements are inspected to ensure nothing has been left behind that might possibly leak information from one compartment (one user) to another.</p>&#13;
<p id="c07-para-0103"><i>Emergency zeroization</i> is often necessary to protect cryptologic systems used by the military, intelligence services, or law enforcement. During such an emergency, the goal is to assure that no cryptologic materials can be recovered by an adversary if they are attempting to seize or take control of the system. In such circumstances, rapid physical destruction is often the last choice of methods but one that is often built into such systems just in case it is needed. (The crew of the <i>USS Pueblo</i>, a signals intelligence ship captured by North Korea in 1968, attempted to destroy all of the classified and cryptologic materials onboard the ship. But there was just too much of it to destroy in two hours—partly due to bad housekeeping before the ship sailed with far too many copies of near-obsolete materials on board!) You might need to think about emergency zeroization for your business, if one of your locations is at risk of a “hostile takeover” by protesters or others.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3"><span id="c07-fea-0007"/>&#13;
<h3 id="head-2-117">What Depths Will We Go To?</h3>&#13;
<section><span id="c07-sec-0022"/>&#13;
<p id="c07-para-0104">In 1968, the Soviet ballistic missile submarine <i>K-129</i> sank in the Western Pacific, coming to rest at a depth of over 16,500 feet. The U.S. Central Intelligence Agency spent over $350 million to have Howard Hughes's Global Marine Development Corp. build the <i>Glomar Explorer</i>, ostensibly a deep-sea drilling platform, to attempt to retrieve not only the submarine itself, its missiles, and nuclear warheads, but also its communications and cryptographic systems. The salvage attempt nearly succeeded—the sub broke in two during the lift—but two missiles, their warheads, and some cryptographic systems were recovered.</p>&#13;
<p id="c07-para-0105">Ironically, the cover story was that Hughes was interested in deep ocean floor mining and that the <i>Glomar Explorer</i> was evaluating the recovery of manganese modules from such depths. Since Howard Hughes was a self-made billionaire in many fields (including aircraft, semiconductors, and space systems), other adventurers followed his lead. As a result of this “deep cover” espionage operations, deep ocean floor mining is now a growth industry!</p>&#13;
</section>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
<p id="c07-para-0106">But these concerns over zeroization are not just for the national security and counter-espionage communities—consumers of secure chat, VOIP and email systems need to be wary as well! As Michael Cobb writes in TechTarget SearchSecurity, in September 2018, the <i>Telegrab</i> malware targets users of the Russian <i>Telegram</i> secure chat system in an attempt to collect keying material, keys, plaintext and ciphertext chat remnants, and other information that might be used (presumably by Russian security services) to break the <span epub:type="pagebreak" id="Page_370" role="doc-pagebreak" aria-label="370"/>encryption used and decrypt the user's chats. It's not immediately clear if normal computing hygiene practices will solve such a data remanence problem; if not, perhaps there's a market for a personal remanence-removal app.</p>&#13;
</section>&#13;
</section>&#13;
<section aria-labelledby="head-2-118"><span id="c07-sec-0023"/>&#13;
<h2 id="head-2-118">Modern Cryptography: Beyond the “Secret Decoder Ring”</h2>&#13;
<p id="c07-para-0107">The current practice of cryptography consists of many related subfields of study and application. We'll look at several of these areas in greater depth; note that all of them provide rich avenues by which you as an SSCP can apply your practical hands-on savvy as you continue to grow your knowledge and experience.</p>&#13;
<section><span id="c07-sec-0024"/>&#13;
<h3 id="head-3-144">Symmetric Key Cryptography</h3>&#13;
<p id="c07-para-0108">Symmetric key cryptography uses the same key to encrypt and decrypt the data being exchanged or protected. The algorithms and processes used can still be quite complex, and they may even include variations in which the sender's and recipient's keys are different but one is easy to compute from the other. The algorithms for symmetric key cryptography typically run very fast—this type is suitable for encrypting high data rate streaming services, for example, or for protecting very large databases at rest or in motion. (The name <i>symmetric</i> refers to the use of the same key, or a simple transform of the key, for encryption and decryption.)</p>&#13;
<p id="c07-para-0109">Key distribution and key management are the Achilles' heel of large-scale deployment and use of symmetric key encryption strategies. Every sender-receiver pair needs to exchange keys, which means for <i>n</i> users in a key exchange system you have <i>n</i><sup>2</sup> key exchanges to manage—and to update when you have to retire one key and replace it with another. With so many keys in motion, it becomes probable that keys may be intercepted and surreptitiously copied in transit, storage, or use. Brute force or other computational techniques can defeat these encryption schemes given sufficient computing resources.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0025"/>&#13;
<h3 id="head-3-145">Asymmetric Key Cryptography</h3>&#13;
<p id="c07-para-0110">The asymmetric key (or public key) cryptographic set of algorithms and systems uses one key for encrypting the plaintext, and a very different key for decrypting the resultant ciphertext back to useful plaintext. This typically means that very different algorithms are used to encrypt and decrypt. Thus a specific asymmetric algorithm is really a matched pair of algorithms, with its forward (encrypt) and backward (decrypt) designs being very different. The strength of asymmetric key cryptography rests on the assertion that it is computationally infeasible to use the encryption key to calculate the decryption key or to use the decryption key to calculate the encryption key, even if the details of the algorithms are known! (Remember Shannon's maxim.) By this, we mean that the amount of supercomputer CPU time, memory, and so forth necessary to run through all of the calculations <span epub:type="pagebreak" id="Page_371" role="doc-pagebreak" aria-label="371"/>required to assure a successful break of these keys would take far, far too long. (Some key strength estimator tools express this in terms of thousands of years—or even millions of years—of computing time needed to break the key in question!) As a result, the asymmetric encryption algorithms are often called <i>trapdoor functions</i>, in that you can fall down through an open trapdoor, but you cannot fall backup through it!</p>&#13;
<p id="c07-para-0111">As you might imagine, the actual mathematics involved in developing an asymmetric key algorithm—and then in trying to prove or assess how “strong” it is—goes well beyond what the typical SSCP needs to have as on-the-job math skills. Just the names of some of these mathematically hard problems alone are daunting: elliptical curves, very large integer factorization, discrete logarithms, and modular exponentiation and multiplication are just a few that are in use today or being implemented in newer cryptosystems.</p>&#13;
<p id="c07-para-0112">Public key distribution systems rely on the near impossibility of computing one of a pair of keys given the other. This lets users publish (or make publicly available) one key (the public key) while keeping the corresponding key secret and protected (or private). In the 1970s, several sets of authors worldwide published papers on such <i>public key exchange protocols</i>, and in 1994, the Government Communications Headquarters (GCHQ) published papers that showed how its staff, working in secret, had invented many of these same concepts in the early 1970s. (GCHQ fulfills a similar role in the United Kingdom as the NSA does in the United States.)</p>&#13;
<p id="c07-para-0113">We'll take a deeper dive into public key infrastructures, and how they have revolutionized the way we keep everything much more secure, later in this chapter.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0026"/>&#13;
<h3 id="head-3-146">Hybrid Cryptosystems</h3>&#13;
<p>Hybrid cryptosystems use multiple approaches to encrypt and decrypt the plaintext they are protecting. The most common hybrid systems are ones that combine asymmetric and symmetric algorithms. Recall that asymmetric algorithms provide exceptionally strong protection but are compute-intensive; symmetric algorithms use much less compute power (and are thus more runtime efficient) but are vulnerable to attacks against their keys. This leads to using</p>&#13;
<ul class="square" id="c07-list-0012">&#13;
<li id="c07-li-0041"><i>Key encapsulation</i> processes, which are typically built with public key infrastructures (PKIs) to handle key exchange</li>&#13;
<li id="c07-li-0042"><i>Data (or payload) encapsulation</i> processes, which use more runtime-efficient symmetric key algorithms</li>&#13;
</ul>&#13;
<p id="c07-para-0115">Most of the protocols we'll look at use some variation of this approach. As we examine these, keep the OSI protocol stack in mind. Somewhere in that stack, the user, an application, or a lower-level service has to be able to initiate a secure exchange with a host, negotiate with that host, control the secure session's exchange of information, and then cleanly terminate the session. The protocols we'll examine in some detail support these tasks.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0027"/>&#13;
<h3 id="head-3-147">Design and Use of Cryptosystems</h3>&#13;
<p>So far, we've been focusing primarily on using cryptosystems to protect information in transit—messages exchanged between two parties. As you saw in an earlier chapter, we need to protect information while it is at rest, whether on our own computer systems, <span epub:type="pagebreak" id="Page_372" role="doc-pagebreak" aria-label="372"/>those at a service bureau, or in a public cloud provider's systems. Encrypting that stored copy of the information protects it over <i>time</i>—what we strongly encrypt and store today is still encrypted weeks or years from now and quite probably has not been compromised. The design and effective operation of such cryptosystems has played a powerful role in the explosive growth of cloud computing (for without effective cryptographic security, everything in the cloud would effectively be public knowledge!).</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3">&#13;
<h3><img alt="Warning" src="Images/warning.png" class="left" width="91" height="53"/> “DIY Crypto” and Secure Systems Don't Mix !</h3>&#13;
<p id="c07-para-0117">Designing and building secure, reliable, trustworthy cryptographic systems is not a “do-it-yourself” or “citizen developer” activity—unless you want to build in exploitable vulnerabilities, of course.</p>&#13;
<p id="c07-para-0118">Possibly the worst mistake that software developers, systems or network administrators, and even security professionals can make is to attempt to create and use their own designs for cryptographic systems. Almost invariably, this leads to the classic design and implementation blunders that weaken rather than enhance the organization's security posture.</p>&#13;
<p id="c07-para-0119">Resist the temptation to be a crypto-dabbler; work with your organization to establish and enforce policies that prevent others on the team from trying to do it themselves.</p>&#13;
<p id="c07-para-0120">Instead, rely on a competent, proven, certified cryptographic supply chain to provide what you need. Then focus on helping the organization learn to use it and maintain it correctly and effectively.</p>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
</section>&#13;
<section><span id="c07-sec-0028"/>&#13;
<h3 id="head-3-148">Cryptanalysis, Ethical and Unethical</h3>&#13;
<p id="c07-para-0121"><i>Cryptanalysis</i> is the science of analyzing encryption systems, plaintext, and ciphertext to determine the relative strength and weaknesses of those systems. Cryptanalysis also refers to using analytical techniques to break an encryption system—that is, to allow for the recovery of and access to the plaintext without properly authorized use of the decryption keys and algorithms. Cryptanalysis is neither good nor bad; it is the intention of the analyst that determines whether this is an attempt to attack an organization via its cryptosystems, or to strengthen its security posture by identifying possible vulnerabilities before they are found and exploited by attackers.</p>&#13;
<p id="c07-para-0122"><i>Ethical cryptanalysts</i> are people working with us, with our knowledge and consent, to help us make our systems more secure and resilient; <i>unethical cryptanalysts</i> are any unauthorized persons or entities that try to access our systems and the information in them. Ethical cryptanalysis can help pinpoint weaknesses in key generation, key management and distribution, or even in the algorithms themselves. This might lead us to redesign these systems and processes or to provide other processes to reduce the risk of harm if we cannot <span epub:type="pagebreak" id="Page_373" role="doc-pagebreak" aria-label="373"/>affordably strengthen our cryptosystems. Attackers may use many of the same tools and techniques and read many of the same technical journals, wiki pages, and books that the defenders rely upon as they try to find and exploit vulnerabilities in our cryptosystems and their use. Motivation and authorization are the only significant things that separate these two sets of cryptanalysts.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0029"/>&#13;
<h3 id="head-3-149">Cryptographic Primitives</h3>&#13;
<p id="c07-para-0123">In most fields of study, and in most systems engineering practice, <i>primitives</i> are the basic building blocks that are used in design, development, testing, analysis and use of such systems. <i>Cryptographic primitives</i> are mathematical or other elements that exhibit some kind of cryptographic property in ways that can relate to real cryptographic problems. Much of the theoretical work being done in cryptography is done with these cryptographic primitives. Cryptographic primitives become the building blocks from which we design and build complex, powerful, and practical cryptographic systems. It is interesting to see how some of these cryptographic primitives compare to problems at the heart of other sciences (such as genetics or quantum physics). Mathematical functions such as one-way functions, and pseudorandom functions are often part of the study of cryptographic primitives. And as we've seen in other areas of information systems security, our use of this term is not always clean and precise. We sometimes see algorithms referred to as primitives or as complete cryptosystems in their own right.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0030"/>&#13;
<h3 id="head-3-150">Cryptographic Engineering</h3>&#13;
<p id="c07-para-0124">If the study of cryptographic primitives is about the underlying theory, cryptographic engineering is the science and engineering practice of building, optimizing, deploying, using, and strengthening cryptographic systems. As you've seen, a lot of manipulation of the plaintext is needed to produce strongly encrypted ciphertext, and then more compute capability is needed to decrypt it at the receiving end. Runtime efficiency is the number one reason that the strongest of cryptographic systems—those using asymmetric algorithms—are used sparingly.</p>&#13;
<p id="c07-para-0125">One of the biggest and perhaps most urgent problems facing cryptographic engineers is what some companies, such as IBM, call <i>pervasive cryptography</i>. Pervasive cryptography seeks to keep the data fully encrypted throughout its creation, data quality, transport, storage, retrieval, use, display, and disposal. It also seeks to protect data against threats like covert paths or aggregation—especially when the human mind is in the middle of those potential threats.</p>&#13;
</section>&#13;
</section>&#13;
<section aria-labelledby="head-2-119"><span id="c07-sec-0031"/>&#13;
<h2 id="head-2-119">“Why Isn't All of This Stuff Secret?”</h2>&#13;
<p id="c07-para-0126">At this point, you might be thinking that if we use cryptography to protect our deepest, darkest, and most vital secrets, then shouldn't everything about cryptography <i>itself</i> be a deep, dark, and vital secret? Well, yes and no.</p>&#13;
<p>It may seem hard to reconcile publishing virtually every detail of modern cryptography with the traditional view that encryption technologies and keying materials were some of the most potent secrets a nation could have. It's not that long ago that famous <span epub:type="pagebreak" id="Page_374" role="doc-pagebreak" aria-label="374"/>espionage cases involving the sale or wrongful disclosure of such crypto-secrets were making headlines, after all. People have been hung, faced firing squads, or are spending multiple life sentences in maximum security for such crimes of espionage. How, then, can the <i>government</i> have open, public debate about the subtle mathematical nuances of cryptographic algorithms, or have challenge contests that seek new approaches (or new hacks against current ones)? Several important changes in the last few decades have combined to make this change in attitude, practice, and perception happen:</p>&#13;
<ul class="square" id="c07-list-0013">&#13;
<li id="c07-li-0043">Cryptography draws its strength from the underlying sciences it is based on—set theory, discrete math, information theory, and operations research, to name but a few. These are widely known and have been written about, published, debated, and discussed across the world. Every human society has been studying these fields, and most of those societies have then applied them to the problem of keeping information secret and safe. The algorithms—the basic cryptographic primitives—are too much a part of the ways that humans think and learn just about <i>everything</i>. This is what Kerckhoff (and later Shannon) meant; the internals of your cryptographic systems and algorithms have already been discovered by others, independent of your efforts and despite your wish to keep them secret. The genie of cryptographic knowledge, you might say, isn't going back into the secret bottle any time soon.</li>&#13;
<li id="c07-li-0044">Despite this, governments have throughout history attempted to criminalize the private or nongovernment-sponsored use of cryptography by businesses or individuals. In some countries, using “secret writing” was considered prima fascia evidence of intent to commit espionage. After World War II, the United States and other NATO countries attempted to restrict the export of cryptographic systems, algorithms, or elements to foreign countries by placing them on the Militarily Critical Technologies List (MCTL). The irony of this, however, was that in many ways, the enemy—largely the Soviet Union and other Communist countries—already had comparable technical expertise and systems; all they needed were the keys to the West's systems.</li>&#13;
<li id="c07-li-0045">In the mid-1970s, several forces in the marketplace collided to make further restriction of cryptography almost impossible. The convergence of landline telephone systems, computer systems, computer networks, and even mobile telephony made it plain that the average American was already “transmitting in code” whenever they used touch-tone or encoded text messages in ASCII (or other character sets). (This had been criminalized by the passage of the Communications Act of 1934, after law enforcement's painful experiences with organized crime's use of encrypted radio to coordinate the smuggling of alcohol during Prohibition. Women working at NSA's forerunner organization were the front line of cryptologic law enforcement during this time.) By the 1980s, the trend was inescapable: hobbyists, college students, entrepreneurs, and of course businesses large and small were using encryption in big ways. Finally, the number of published papers and conference proceedings that described systems like public key infrastructures, asymmetric encryption algorithms, and digital signatures forced a decision. If the United States (and other NATO countries) would hamstring their own communications and computing industries by tightly restricting their export of cryptographic products, those industries would lose customers to other nations who had no such export restrictions in place. With the death of <i>key escrow</i> and legally mandated trapdoors in commercial encryption products (in the U.S. market only), the market's mandate had been heard loud and clear.</li>&#13;
</ul>&#13;
<p id="c07-para-0128"><span epub:type="pagebreak" id="Page_375" role="doc-pagebreak" aria-label="375"/>Finally, we have to consider the equally explosive growth in two distinct populations—the unethical cryptographers and the ethical ones. By the middle 1970s and the end of the Vietnam War, there were perhaps 10,000 people in the United States and its NATO allies who we could say were cryptologists—who knew how all of this stuff worked, and who could build and defend cryptosystems as a result. Depending on how you count up the adversaries—Communist bloc nations, organized crime, other nonaligned but not very friendly countries—perhaps there were two or three times that number of unethical (or hostile) cryptographers. Today? Estimates vary widely as to how many people and organizations enjoy the sanctuary of the Dark Web from which they develop, support, profit from, and exploit a vast community of cyberattackers, malware builders, intelligence analysts, and hired hands as they pursue their agendas.</p>&#13;
<p id="c07-para-0129">Millions of minds talk, share, write, publish, blog, and post what they learn. This incredibly powerful open peer review capability is what finds the vulnerabilities and shares that knowledge with all who need to quickly work around the next zero day exploit based on a cryptographic weakness.</p>&#13;
<p id="c07-para-0130">That's probably the best reason to keep everything but the keys themselves public, open, and published.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3"><span id="c07-fea-0008"/>&#13;
<p><img alt="Realworld" src="Images/realworld.png" class="left" width="239" height="36"/></p>&#13;
<h3 id="head-2-120">What's Still “Classified” in the E-Voting Project?</h3>&#13;
<section><span id="c07-sec-0032"/>&#13;
<p id="c07-para-0131">Part of the requirements for any public-facing project is that it must clearly communicate how the public's concerns are protected, especially when that involves ostensibly private information about individual citizens. In particular, since most democracies pride themselves on having <i>secret</i> ballots, with no official record made of how each voter actually votes, the issues of accountability, recounts, and voter fraud are lightning rods for public concern and journalistic exposure and debate.</p>&#13;
<p id="c07-para-0132">How would you address this? What would your information classification guide look like for this project? How would you use it to assure the public that their secrets remain safe, yet fraudsters and ghosts cannot vote? And how do you make such a “reveal” to the public without revealing too much to would-be attackers?</p>&#13;
</section>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
</section>&#13;
<section aria-labelledby="head-2-121"><span id="c07-sec-0033"/>&#13;
<h2 id="head-2-121">Cryptography and CIANA+PS</h2>&#13;
<p id="c07-para-0133">Some of the applications of cryptography to the five tenets of information security are easy to recognize; others may not be. We'll go into these in greater detail in a bit, but for now, let's explore these important uses of cryptography. We'll do this starting from the most obvious uses and proceed to those that might not come to mind so readily.</p>&#13;
<section><span id="c07-sec-0034"/>&#13;
<h3 id="head-3-151">Confidentiality</h3>&#13;
<p id="c07-para-0134"><span epub:type="pagebreak" id="Page_376" role="doc-pagebreak" aria-label="376"/>Suitably encrypting cleartext information makes it difficult for unauthorized readers to view, understand, or use the meaning contained in that plaintext. Encrypting information provides for its confidentiality at rest or in motion. If the information must be decrypted for use, other means must be employed to protect the information where and when it is in use.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0035"/>&#13;
<h3 id="head-3-152">Authentication</h3>&#13;
<p id="c07-para-0135">As you recall from <a href="c05.xhtml">Chapter 5</a>, any request by a subject (be that a person or a process) for access to or use of an information asset needs to be authenticated. We must be able to prove that the subject is who (or what) they claim to be, and then compare that to our controlled and protected lists or rosters of capabilities and privileges. In almost all circumstances, doing so requires the subject to send credentialing information of some kind to our systems; while in transit, that information can be intercepted for later reuse by an otherwise unauthorized subject. It can also be altered while in transit. Credentialing information is also stored (in some form) by subjects and by our authentication systems; encrypting that stored information provides protection at rest.</p>&#13;
<p id="c07-para-0136">We don't have to decrypt the credentials in order to validate that they are correct. If our authentication system stores <i>only</i> the encrypted (ciphertext) versions of the credentials, then a simple comparison of the ciphertext sent by the subject to the ciphertext kept on file validates or invalidates the identity of the subject. This use of digital signatures in their ciphertext form provides information protection while in use.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0036"/>&#13;
<h3 id="head-3-153">Integrity</h3>&#13;
<p id="c07-para-0137">Every communications or information storage technology is subject to error, and yet every purpose for which we use communication and information requires that information to be as error-free as possible. This fact has led to developing error detection and correction techniques—adding a parity bit to each byte or calculating a checksum digit for a block of symbols, for example. As data blocks (or messages or files) get larger and larger, error correction code (ECC) must become more complex if it is to comprehensively provide information integrity assurance. ECC can identify where an error in the associated data has occurred—which bit got flipped from a 1 to a 0, or which symbol was changed into another symbol—and then show us what the correct bit or symbol ought to be. ECC works by having the sender calculate the ECC ciphertext value of the message, transmitting it along with the message content (in plaintext). The receiver calculates their own ECC ciphertext value, using the same agreed-to protocol or algorithm for that ECC process, and compares it to the ECC sent with the message. Differences in sent and received ECC can then be used to find and fix the error (often by notifying the sender to resend the block).</p>&#13;
<p><span epub:type="pagebreak" id="Page_377" role="doc-pagebreak" aria-label="377"/>We use different names to refer to this use of cryptography to protect (or validate) the integrity of information, whether that information is at rest, in transit, or in use:</p>&#13;
<ul class="square" id="c07-list-0014">&#13;
<li id="c07-li-0046"><i>Hashing</i> is the general process of using an algorithm to compute a smaller, unique value that represents the contents of the plaintext in some way. This hash value can have many uses, depending on our needs. Database systems, for example, often need to take very long strings of text (such as personal names) and <i>map</i> or convert them to a logical record number in a file.</li>&#13;
<li id="c07-li-0047">A <i>digital signature</i> asserts that the file or message it is associated with is in fact what its name or circumstances claim it to be. Digital signatures attest to the integrity of software distribution files, for example. Digital signatures can be generated using hash algorithms or more complex encryption techniques; recipients then use the same agreed-to algorithms to validate that the signature and the file agree with each other.</li>&#13;
</ul>&#13;
</section>&#13;
<section><span id="c07-sec-0037"/>&#13;
<h3 id="head-3-154">Nonrepudiation</h3>&#13;
<p id="c07-para-0139">As you saw in <a href="c05.xhtml">Chapter 5</a>, we often need to be able to block any attempts to deny that somebody took an action, sent a message, or agreed to something in a document. Virtually every transaction in business, and many interpersonal transactions, depend on being able to prove that both parties to the transaction actually participated in it. (Imagine trying to buy a house, and having the seller claim that they never agreed to the signed offer and acceptance contract!) Nonrepudiation provides us all the confidence that having reached an agreement, one party or another cannot back away from the agreement by claiming that they never agreed to it. In most cases, this requires building a set of evidence that attests to the transaction or the agreement, the identity of the parties involved, and even to the process they went through to reach agreement. In many nations, business and government agreements are literally bound up with special colored ribbons, riveted fasteners, and seals so that visibly and physically the agreement and all of its supporting evidence are in one package. This package can be audited, placed in protected storage (such as an official records office), and used as evidence if the parties have to seek enforcement or relief in a court of law.</p>&#13;
<p>Generalizing this, we see that nonrepudiation requires that</p>&#13;
<ul class="square" id="c07-list-0015">&#13;
<li id="c07-li-0048">The identities of all parties have been authenticated.</li>&#13;
<li id="c07-li-0049">All parties have proven that they have the authority or privilege to participate in the transaction.</li>&#13;
<li id="c07-li-0050">The terms and conditions of the transaction exist in a form that can be recorded.</li>&#13;
<li id="c07-li-0051">All of this information can be collectively or separately verified and validated to be true and correct, free from any attempts to tamper with or alter it.</li>&#13;
</ul>&#13;
<p id="c07-para-0141">Nonrepudiation and integrity of information are strongly linked. We believe that the bank notes or coins we spend are <i>legal tender</i>, able to be lawfully used to pay for goods and services, because we believe in the integrity of the coins and paper notes themselves and that the issuing government won't turn around and say, “Those are no longer valid.”</p>&#13;
</section>&#13;
<section><span id="c07-sec-0038"/>&#13;
<h3 id="head-3-155">“But I Didn't Get That Email…”</h3>&#13;
<p id="c07-para-0142"><span epub:type="pagebreak" id="Page_378" role="doc-pagebreak" aria-label="378"/>Let's consider one of the most common examples of the failure to provide reliable nonrepudiation—the use of typical email systems. Although email protocols provide ways for senders and recipients to exchange delivery and read receipts, these fail in nearly all circumstances to provide any proof that what one party claims was sent in an email was received and opened by the intended recipients. Within an organization (that is, when on a single, unified email server), delivery and read receipts are somewhat reliable, but no one relies on them as legally acceptable evidence or proof. It's also trivially easy for senders or recipients to edit the email after it's been sent or received, falsifying address, delivery, or content information in the process. Recipients can easily claim that they never received the email in question, and this lack of verified receipt and viewing of an email can give rise to deception or fraud.</p>&#13;
<p id="c07-para-0143">Postal mail systems have long used registered and certified mail delivery processes to provide legally acceptable proof that a letter or package sent by one party to another was in fact delivered to the recipient and received by them. These processes require proof of identification of sender and recipient, and in the case of certified mail they record every step along the delivery path. Courts of law have long recognized that these processes, and similar ones offered by private document or package courier companies, provide acceptable evidence of delivery and receipt. Of course, the U.S. Postal Service cannot prove that the envelope containing the letter was opened, or that the letter was read or understood by the addressee—but by denying the opportunity to claim “I never received that letter,” many contract disputes or simple misunderstandings can be quickly resolved.</p>&#13;
<p id="c07-para-0144">There are several examples of commercial service providers that offer something conceptually similar to registered mail for email and e-documents. Many national postal authorities around the world have started to offer these “registered email” services to their individual, business, and government customers. The European Union set standards in place via the European Electronic Commerce Directive 2000/31/EC, for example, which specifies the technical standards such proof-of-receipt systems must meet so as to provide legally acceptable evidence of delivery and receipt. One of these systems, provided by RPost, uses a number of cryptographic techniques to provide these capabilities. The U.S. Department of Defense and other NATO nations have long used proprietary systems to ensure that when electronic messages are sent by one command to another, or to a subordinate unit, the recipient cannot ignore that message simply by claiming that “we never got that order.” These systems, too, make extensive use of cryptographic techniques. Key to all of these systems is that strong identity verification, authentication, and information integrity protection measures must work together.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3">&#13;
<h3><img alt="Tip" src="Images/tip.png" class="left" width="72" height="53"/> </h3>&#13;
<p id="c07-para-0146">Many organizations around the world are making use of smart email and communications systems that encourage or require senders to use encryption and digital signatures to protect message content, integrity, and authenticity. Making this process as friction-free as possible can be done with context-sensitive scanning of a note as it is being written, or as attachments are added to it.</p>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
</section>&#13;
<section><span id="c07-sec-0039"/>&#13;
<h3 id="head-3-156">Availability</h3>&#13;
<p><span epub:type="pagebreak" id="Page_379" role="doc-pagebreak" aria-label="379"/>We assess the availability of an information system (in security terms) at two levels:</p>&#13;
<ul class="square" id="c07-list-0016">&#13;
<li id="c07-li-0052">Is the <i>system</i> itself, and the services it provides, available and ready to perform when subjects (users or processes at their behest) request objects or other services?</li>&#13;
<li id="c07-li-0053">Is the information needed by the user or requesting subject available when needed, and can it be completely and correctly output, displayed, or provided to that user or subject?</li>&#13;
</ul>&#13;
<p id="c07-para-0148">You've already seen how cryptography supports both of these functional needs by providing for stronger authentication and information integrity control systems. Cryptography directly contributes to making the requested information available where it is needed, when it is needed, without compromise or loss of integrity. This offers protection for information at rest and in motion.</p>&#13;
<p id="c07-para-0149">Cryptography also contributes to overall systems availability, typically as a component of strong access controls. It prevents or limits resources being exhausted (as in a denial of service attack) and can protect key systems functions by making it much harder for unauthorized subjects to perform disruptive actions.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3"><span id="c07-fea-0009"/>&#13;
<p><img alt="Realworld" src="Images/realworld.png" class="left" width="239" height="36"/></p>&#13;
<h3 id="head-2-122">CIANA and E-Voting</h3>&#13;
<section><span id="c07-sec-0040"/>&#13;
<p id="c07-para-0150">You're still working on the city's e-voting and e-registration systems design concepts. Your project manager at the City Election Commissioner's office asks how you can summarize the needs for information security and information risk management that this project has to face. CIANA clearly jumps to your mind.</p>&#13;
<p id="c07-para-0151">How have your initial user stories and information classification ideas evolved as you've gone further into this project? Update those to reflect a stakeholder-friendly CIANA-style audit of the issues, risks, and recommendations.</p>&#13;
<p id="c07-para-0152">What bottom lines does that bring you to?</p>&#13;
</section>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3"><span id="c07-fea-0010"/>&#13;
<h3 id="head-2-123">Classical vs. Modern Cryptography</h3>&#13;
<section><span id="c07-sec-0041"/>&#13;
<p id="c07-para-0153">As mentioned previously, most of the cryptographic algorithms used prior to the dawn of the computer age relied on alphabetic substitution and transposition to encrypt human-readable plaintext messages. Since most of these messages were in words and sentences, written in a particular human language, they were subject to attacks based on known statistical information about the language being used. For example, the letter “e” is the most frequently used letter in English; thus, you could look at ciphertext and <span epub:type="pagebreak" id="Page_380" role="doc-pagebreak" aria-label="380"/>possibly guess that the most frequently occurring symbol was an encrypted “e.” Similarly, pattern recognition could be used as part of an attack.</p>&#13;
<p id="c07-para-0154">In World War II, the British built upon earlier work by Polish mathematicians and cryptographers to break the Enigma encryption used by Nazi Germany and Fascist Italy, in part because most of the radio intercepts showed very similar blocks of ciphertext at their start and end. Guessing that this might be standard salutations (like “Heil Hitler!”), date/time stamps or even weather forecast information allowed Alan Turing's team of cryptanalysts to dramatically narrow down their search through the space of all possible ciphertexts. Human language also contains many redundancies, which mean that small errors in the original plaintext may not confound the meaning of the message—and just as likely, small errors made in decrypting the ciphertext (by authorized or unauthorized recipients) may still allow the intended meaning to be understood.</p>&#13;
<p id="c07-para-0155">These lexically derived cryptographic algorithms have little ability to deal with the fact that many messages written by humans for other humans to read exhibit strong statistical patterns. The first paragraph in this sidebar, for example, is by no means a random string of letters or words. The phrase “used prior to” is most likely going to be followed by a phrase that asserts or suggests a period of time, for example. Google Translate and other machine translation systems work on this same statistical principle.</p>&#13;
<p id="c07-para-0156">Before you dismiss the study of classical cryptography from your mind, consider that someone may in fact be using them as part of their attacks on your systems, or as part of their data exfiltration efforts, simply because they aren't sophisticated enough techniques to be a credible threat. You should also consider that many software developers attempt to protect sensitive data by using simple, symmetric encryption embedded in their source code—often with the keys plainly visible in that code! You won't be tested on the Caesar, Vigenère, or Saint-Cyr Slide algorithms when you take your SSCP exam, but thinking about how these ciphers work may sharpen your mind regardless.</p>&#13;
</section>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
</section>&#13;
<section><span id="c07-sec-0042"/>&#13;
<h3 id="head-3-157">Privacy</h3>&#13;
<p>Protecting private or sensitive data requires a careful orchestration of a number of processes, since in many cases there will be many processors or custodians who have possession of part of the data that taken together makes up a complete package of such private or sensitive data pertaining to an individual. This means that a lot of data is in use and at rest in many processing locations, and in motion between them. Aggregations of such data for lawful purposes also have to be done in ways that protect the privacy of the individuals associated with that data. For example:</p>&#13;
<ul class="square" id="c07-list-0017">&#13;
<li id="c07-li-0054">Many data hiding or masking techniques such as <i>anonymization</i> or <i>tokenization</i> will use cryptographic techniques to replace one or more fields of the data with a cryptographically secure replacement value. This might allow a public health agency to gather current patient diagnostic and treatment data from all healthcare providers in a region, as a <span epub:type="pagebreak" id="Page_381" role="doc-pagebreak" aria-label="381"/>way of monitoring the spread of a disease in that region, yet do so without compromising any one patient's identity or other private data.</li>&#13;
<li id="c07-li-0055">Storage of protected data may be required (by law, regulation, or contract) to be kept in encrypted form, with its related encryption keys stored and managed securely.</li>&#13;
<li id="c07-li-0056">Access control systems will often enforce security policies that limit the viewing or use of protected data to specific by-name individuals at a processing location; these often rely on encryption services as part of their identity authentication processes.</li>&#13;
</ul>&#13;
</section>&#13;
<section><span id="c07-sec-0043"/>&#13;
<h3 id="head-3-158">Safety</h3>&#13;
<p id="c07-para-0158">The safe operation of any <i>operational technology</i> (OT) system (that is, any industrial controls, SCADA, or cyber-physical process automation system) dictates a “safety first” culture be the unifying principle in every aspect of systems design, operational use, and support. These systems depend upon the flow of commands and data internally and externally. Spurious or malicious commands and data must be kept out of these systems. Systems must also be kept secure from attackers attempting to gather technical intelligence (and thus <i>fingerprinting</i> the systems), which might expose possible attack opportunities or be used during an attack as part of assessing the success or failure of part of the operation. Interference with critical system timing and response loops could be catastrophic in some instances; these control and feedback loops should also be kept safe from intrusion or corruption. Encryption can thus play a vital role in supporting the safety-critical CIANA needs of such systems.</p>&#13;
</section>&#13;
</section>&#13;
<section aria-labelledby="head-2-124"><span id="c07-sec-0044"/>&#13;
<h2 id="head-2-124">Public Key Infrastructures</h2>&#13;
<p id="c07-para-0159">Three main factors separate the modern from the classical era of cryptography. The first is the switch from lexical analysis as the focus of cryptography to computationally hard problems—problems that are fairly easy to compute in one direction (given an <i>x</i>, find the corresponding <i>y</i>), but very difficult if not impossible to do in the reverse (given that <i>y</i>, find the <i>x</i> that would generate it). The second is the near-simultaneous development, in the United States and United Kingdom, of what have been called <i>public key exchange protocols</i>. The third and perhaps most significant factor has been the explosive growth in the population of cryptographers. Before this time, perhaps tens of thousands of people around the world made up this community and were working directly for military and intelligence cryptographic programs; a very small number of academics and theorists published a few papers on the topic. As the 1980s arrived, this community of amateur and professional cryptographers just kept growing. Classes and training materials on cryptanalysis abound on the Internet and in schools at all levels. All of this makes it difficult to impossible to estimate today's total population of cryptanalysts, both amateur and professional, ethical or unethical; it's also probably meaningless to try. Add to that the number of people involved in peer review of open source systems and software for operating systems, <span epub:type="pagebreak" id="Page_382" role="doc-pagebreak" aria-label="382"/>browsers, applications programs, <i>and</i> cryptography, and Kerckhoff's and Shannon's observations about the enemy knowing your system seem all the more prescient!</p>&#13;
<p id="c07-para-0160">One other revolution must be recognized in terms of its effects on cryptographic algorithm design the personal computer revolution. Personal computing provided the market demand for millions of powerful graphics processing units (GPUs) as well as for far more powerful central processing units (CPUs). When a million consumers are willing to spend an extra hundred dollars or so on the price of a home computer, suddenly there's a market advantage in having machines that can smoothly draw screens for classic games like Flight Simulator. GPUs are designed to take massive streams of data, perform the same kinds of repetitive manipulations on them, and stream the results quickly and efficiently, which provides graphics rendering necessary to take compressed video and render it to the screen smoothly. These same capabilities are useful in cryptanalysis, whether done by the defenders when designing new algorithms and cryptosystems or by the attackers while trying to attack them. Breaking modern cryptographic systems—<i>when they are correctly and effectively used and maintained</i>—still seems to be the province of the well-funded adversary. Millions of CPU cycles (and GPU cycles) might be out there for the taking, but the storage needed to keep huge rainbow tables, precomputed salts, and such is expensive, no matter where you find it.</p>&#13;
<p id="c07-para-0161">Perhaps the biggest surprise, also in the 1970s, was that bastions of secrecy like the NSA saw the need to encourage public review, discussion, analysis, and debate about cryptography, leading to public competitions for new algorithms and systems concepts. Public key exchange and asymmetric algorithms, for example, became the new fundamental building blocks of cryptography, primarily because they were published, debated, and analyzed, and they competed against other ideas, new and old.</p>&#13;
<p id="c07-para-0162">So while the modern cryptographic era is one of publish or perish, peer review, and widespread, global competition of ideas and their implementation, it's the technical factors that mark the change from classical to modern cryptography. These factors led to the widespread adoption of hybrid approaches to cryptography, which are what make <i>public key encryption</i>, <i>public key infrastructures</i>, and our modern e-commerce world possible.</p>&#13;
<section><span id="c07-sec-0045"/>&#13;
<h3 id="head-3-159">Diffie-Hellman-Merkle Public Key Exchange</h3>&#13;
<p id="c07-para-0163">One of the most vexing questions in cryptography has been how to establish secure, encrypted communication between two parties who have no previous knowledge of each other. In effect, this is about proving identity (of both parties) as well as jointly authorizing each other to participate in the session that's about to take place. One important distinction must be recognized at the start: key exchange is not about exchanging secret information between the parties; rather, it is about <i>creating</i> a shared key to use for subsequent encrypted sharing of secrets. Furthermore, it's important to realize that the “public” part of public key exchange is that you can quite literally publish parts of that key exchange without compromising the security of the encryption it supports. Whitfield Diffie and Martin Hellman, in a 1976 article published in <i>IEEE Transactions on Information Theory</i>, first showed that public key exchange requires the use of what they called <i>trapdoor functions</i>—a class of mathematical problems that are easy to do in one direction (like falling through a trapdoor in the floor) but extremely difficult if not impossible to do in the other direction.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3"><span id="c07-fea-0011"/>&#13;
<h3 id="head-2-125">Distribution, Exchange, or Infrastructure?</h3>&#13;
<section><span id="c07-sec-0046"/>&#13;
<p><span epub:type="pagebreak" id="Page_383" role="doc-pagebreak" aria-label="383"/>It's important to keep the distinction between <i>key distribution</i> and <i>key exchange</i> clearly in mind, and then add the “secret sauce” that scales an exchange or distribution process up into an <i>infrastructure</i>:</p>&#13;
<ul class="square" id="c07-list-0018">&#13;
<li id="c07-li-0057">Classical cryptographic systems depend upon key <i>distribution</i> systems to ensure that all known, authenticated, and trustworthy parties on the system have current encryption keys. Key distribution is the passing of secret information—the keys—from the key originator and controller to the parties who will use it.</li>&#13;
<li id="c07-li-0058">Key exchange systems start with the presumption that parties do not know each other, and have no a priori reason to trust each other. They achieve this trust, and therefore can share in a secure, encrypted conversation, by <i>generating</i> their session key together, and keeping that session key secret to themselves.</li>&#13;
</ul>&#13;
<p id="c07-para-0165">A key exchange system is sometimes known as a <i>zero-knowledge</i> system or process, signifying that neither party knows anything secret about the other—at any point during their communication.</p>&#13;
<p id="c07-para-0166">In both cases, the underlying key <i>infrastructure</i> is the collection of systems, communications pathways, protocols, algorithms, and processes (people-facing or built into software and hardware) that make key distribution <i>or</i> exchange work effectively and reliability.</p>&#13;
</section>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
<p>Let's start with a simple illustration. Suppose Bob and Carol wish to establish their own encrypted Internet connection with each other. Here's what happens:</p>&#13;
<ol class="decimal" id="c07-list-0019">&#13;
<li id="c07-li-0059">Bob and Carol choose a suitable trapdoor function, with its forward and reverse operations. They choose the key parameters that they will use. What they agree on can be shared in open, unsecured email with each other.</li>&#13;
<li id="c07-li-0060">Carol chooses her private key and keeps it secret; she uses the trapdoor function to calculate her public key, which she sends to Bob. (Anyone can see her public key. More on this in a moment.) Bob, too, chooses a private key and uses the same trapdoor function to calculate his public key and sends that to Carol.</li>&#13;
<li id="c07-li-0061">Carol applies the forward trapdoor function to Bob's public key, using her own private key; this has encrypted Bob's public key with Carol's private key to produce the <i>session key</i>. Carol keeps this secret; she doesn't have to send it to Bob, and she shouldn't!</li>&#13;
<li id="c07-li-0062">Bob applies the same forward trapdoor function to Carol's public key, using his own private key to encrypt it with. This produces the same session key by the magic of the mathematics of the chosen trapdoor function. (The proof is left to the mathematically inclined reader.)</li>&#13;
<li id="c07-li-0063">Carol and Bob now share a new secret, the session key, which they have generated without revealing any of their own secret knowledge (such as their private keys) to each other. This key can be used with an appropriate (and agreed to) symmetric encryption algorithm so that Bob and Carol can exchange information with each other and keep others from being able to read it, so long as the session key remains secret.</li>&#13;
</ol>&#13;
<p id="c07-para-0168"><span epub:type="pagebreak" id="Page_384" role="doc-pagebreak" aria-label="384"/>What about Eve, sitting along the sidelines of this conversation? Suppose Eve is, well, eavesdropping on Bob and Carol's key exchange; she somehow is trapping packets going back and forth and recognizes that they've agreed to an algorithm and its control parameters; she recognizes the exchange of Bob's and Carol's public keys for what it is. As long as Eve does not have a secret key that participated in the computation of the session key, she does not have anything that lets her read the traffic that Bob and Carol encrypt with the session key. Eve is left to using brute force, side channel, or other attacks to attempt to break the session encryption.</p>&#13;
<p id="c07-para-0169">Ted, on the other hand, is someone Bob and Carol want to include in a three-way secure conversation (still keeping Eve out in the cold, of course). The process shown in steps 1 through 5 can easily be expanded to include three or more parties who share the choices about algorithms and parameters, and who then compute their own public keys and share them; they then use everybody else's public keys to compute their own copy of the session key.</p>&#13;
<p id="c07-para-0170">Obviously, this simplified description of the Diffie-Hellman key exchange process has some vulnerabilities. (We note that since 2002, Hellman asked this be known as Diffie-Hellman-Merkle, to recognize Ralph Merkle's foundational work in 1972 that paved the way for Diffie and Hellman's work four years later. By and large, this gesture of respect has not been widely adopted, even though Merkle's name is on the US Patent issued in 1977 for this process.) It doesn't actually authenticate that Bob is Bob, or Carol is Carol, thus tempting Ted to be the “man in the middle” who masquerades as the other party from the initial handshake and key generation through to the end of the session. The choice of trapdoor function, and the control values for it, can also present exploitable vulnerabilities. But in its simplest form, this is where the public key infrastructure (PKI) got its start.</p>&#13;
<p id="c07-para-0171">Building a public key infrastructure starts with the algorithms used to generate the shared secret keys used to establish trustworthy communications. Those algorithms have to be implemented in some combination of software and hardware, and made available to users to incorporate into their systems or use as stand-alone messaging apps. These apps themselves, and the software and hardware distribution channels (wholesale, retail, original equipment manufacturer [OEM], or other) all have to be part of a network of trust relationships, if two end users are going to trust such apps to protect their communication with each other. So the problem of building a public key infrastructure must also embrace the problem of updating trusted software (and hardware) distribution.</p>&#13;
<p id="c07-para-0172">Let's start by looking at the hybrid encryption systems components of such a public key exchange infrastructure; then we'll look at some of the protocols that are part of scaling such an infrastructure up to global levels of acceptance and use.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3"><span id="c07-fea-0012"/>&#13;
<h3 id="head-2-126">Bob, Carol, and <i>Who</i>?</h3>&#13;
<section><span id="c07-sec-0047"/>&#13;
<p id="c07-para-0173">Many books, lectures, papers, and presentations on cryptography, cybersecurity, and information assurance revolve around four hypothetical actors, who take their names from the 1969 movie <i>Bob &amp; Carol &amp; Ted &amp; Alice</i>. Typical of the era, this film focused on wife-swapping, and thus on lies, deceit, secrets shared, and secrets compromised. Much like the <i>Mad Magazine</i> characters in its near-trademark “Spy vs. Spy” cartoon strip (by <span epub:type="pagebreak" id="Page_385" role="doc-pagebreak" aria-label="385"/>Antonio Prohías, first in 1961, and still in print!) and their iconic white and black wardrobes, its character names and their roles became stereotypes for many things—including the good, the bad, and the bystanders in information security. We do not recommend any of these characters as role models, nor offer any speculation as to why they became the traditional placeholders in information security examples.</p>&#13;
</section>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
</section>&#13;
<section><span id="c07-sec-0048"/>&#13;
<h3 id="head-3-160">RSA Encryption and Key Exchange</h3>&#13;
<p id="c07-para-0174">Immediately after Diffie and Hellman published their article in 1976, two MIT computer scientists, Ron Rivest and Adi Shamir, teamed with MIT mathematician Leonard Adleman and set out to create a suitable trapdoor or one-way function for use in a public key exchange process. These three focused on both an algorithm (based on modular exponentiation) as well as a process by which users could authenticate themselves, hence eliminating the risk of the man-in-the-middle attack. As is typical in the scientific and technical literature, they named the algorithm after themselves (Rivest-Shamir-Adleman or RSA). The three authors founded RSA Security, Inc., in 1982, and MIT was granted a U.S. patent in 1983 that used the RSA algorithm. Prior publication in 1973 by Clifford Cocks in the United Kingdom of very similar concepts precluded patenting RSA in other countries, and had that publication by Cocks been known, it would have invalidated even the U.S. patent (it was not disclosed by GCHQ until 1997). RSA later released the algorithm into the public domain in September 2000.</p>&#13;
<p id="c07-para-0175">Like Diffie-Hellman, RSA uses the properties of modulo arithmetic applied to exponentiation of very large integers, where the modulus is also a very large prime number. Prior to the 1990s, the compute power needed to perform such operations (just to create the keys) was substantial, and the compute power necessary to break such algorithms was thought to be unaffordable by even the security services of major nation-states.</p>&#13;
<p id="c07-para-0176">The founders of RSA did spend most of the 1980s and 1990s in what can only be called a pitched battle with the NSA and the White House. As this was during the heart of the Cold War and the Reagan-Bush defense buildup, it's not surprising that the government saw any widespread use of powerful encryption by <i>anybody</i> as a threat to national security. (It still sees that threat, particularly since anybody can be a terrorist, while in the same breath it knows that our modern digital economy cannot function without widespread public use of highly secure encryption.) This history in and of itself is worth your time and study, as an SSCP and as a citizen.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0049"/>&#13;
<h3 id="head-3-161">ElGamal Encryption</h3>&#13;
<p id="c07-para-0177">First described by Taher ElGamal in 1985, this asymmetric encryption algorithm is based on the mathematical theory of cyclic groups and the inherent difficulties in computing discrete logarithms in such groups. Borrowing from Diffie-Hellman-Merkle key exchange concepts, ElGamal provides for asymmetric encryption of keys previously used in symmetric encryption schemes. ElGamal also proposed a digital signature mechanism that allows third parties to confirm the authenticity of a message signed with it; this signature mechanism is not widely used today, but it did lead NSA to develop its Digital Signature Algorithm (DSA) as part of <span epub:type="pagebreak" id="Page_386" role="doc-pagebreak" aria-label="386"/>the Digital Signature Standard (DSS). DSS was adopted as FIPS 186 in 1996, and has undergone four revisions since then. (Don't confuse DSA with ElGamal signature schemes.)</p>&#13;
<p id="c07-para-0178">Some hybrid encryption systems use ElGamal to encrypt the symmetric keys used to encrypt message content. It is vulnerable to the chosen-ciphertext attack, in which the attacker somehow tricks or spoofs a legitimate user (an <i>oracle</i>) into decrypting an arbitrary message block and then sharing those results with the attacker. (Variations on this kind of attack were first known as <i>lunchtime attacks</i>, since the user's machine was assumed to be available while they were at lunch.) ElGamal does provide padding and other means to limit this vulnerability.</p>&#13;
<p id="c07-para-0179">ElGamal encryption is used in the GNU Privacy Guard system (GPG), which we'll look at in concert with PGP in a moment.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0050"/>&#13;
<h3 id="head-3-162">Elliptical Curve Cryptography (ECC)</h3>&#13;
<p id="c07-para-0180">ECC exploits the properties of discrete logarithms by using <i>elliptic curves</i>, which are the graphs of discrete logarithm functions when plotted out on an X-Y or Cartesian plane, and then reflected around the x-axis. By iteratively traversing those curves geometrically—by drawing lines across them and determining where they intersect the curves—a private-public key pair can be generated. We won't go into the math involved with this, but in effect, the number of times that you spiral around that graph is the private key value, and the point on the curve you end up at is its corresponding public key. The important cryptovariables—the parameters of the discrete logarithm function that is plotted as the curve, the key size, and even the point at which you start dotting the curve from, can all be published; the nature of the math says that trying to then take a <i>public</i> key and back-compute its corresponding “number of times around the curve” is <i>computationally infeasible</i>, and hence this qualifies as a very strong trapdoor function.</p>&#13;
<p id="c07-para-0181">For perspective, it's worth considering that a useful, highly secure ECC key size would be in the range of 224 to 521 bits in length; that's 224 to 521 iterations around that “dotting-the-curve” loop. The payoff from ECC is that a key size of 224 bits is comparable in cryptographic strength to an RSA or Diffie-Hellman key size of 2,048 bits. This means that the demands on memory, CPU power, and bandwidth needed to use ECC, especially with mobile devices, can be a lot less than for RSA, Diffie-Hellman, or other prime factor–based algorithms.</p>&#13;
<p>ECC has been known and understood since the early 1980s, but it has only become extremely popular in the last ten years or so, driven in part by the need for secure encryption on consumer mobile devices.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3">&#13;
<h3><img alt="Note" src="Images/note.png" class="left" width="76" height="53"/> An ECC Explainer</h3>&#13;
<p id="c07-para-0184">John Wagnon at F5 DevCentral has put together a short video that steps us through the concepts behind ECC. Find it at <code><a href="https://www.youtube.com/watch?v=dCvB-mhkT0w&amp;t=1s">https://www.youtube.com/watch?v=dCvB-mhkT0w&amp;t=1s</a></code>.</p>&#13;
<p id="c07-para-0185">He does make a couple of minor math errors in his remarks, but let's not quibble. Sit back, enjoy, and have fun watching and learning.</p>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
</section>&#13;
<section><span id="c07-sec-0051"/>&#13;
<h3 id="head-3-163">Digital Signatures</h3>&#13;
<p><span epub:type="pagebreak" id="Page_387" role="doc-pagebreak" aria-label="387"/>Publication of RSA also led to widespread understanding, and later implementation, of digital signatures as an important application of cryptography. Suppose our friend Carol wishes to send a message to Bob, but in doing so, she needs to prove to Bob that the message is inarguably from her and not from some imposter:</p>&#13;
<ol class="decimal" id="c07-list-0021">&#13;
<li id="c07-li-0064">Carol produces a strong hash of the message content.</li>&#13;
<li id="c07-li-0065">Carol encrypts that hash value, using the forward trapdoor function and her private key. This new value is her digital signature.</li>&#13;
<li id="c07-li-0066">Carol sends the message and her digital signature to Bob.</li>&#13;
<li id="c07-li-0067">Bob decrypts Carol's digital signature, using the reverse trapdoor algorithm and Carol's public signature, to produce the signed hash value.</li>&#13;
<li id="c07-li-0068">Bob uses the same hash function to produce a comparison hash of the message he received (not including the signature). If this matches the value he computed in step 4, he has proven that Carol (who is the only one who knows her private key) is the only one who could have sent that message.</li>&#13;
</ol>&#13;
<p id="c07-para-0187">In 1985, Taher Elgamal published a paper that argued for a public key infrastructure and signature scheme based on discrete logarithms. The ElGamal discrete logarithm cryptosystem and ElGamal signature scheme became important drivers for the National Institute of Standards and Technology's (NIST's) development of the Digital Signature Algorithm (DSA), which then became the centerpiece of NIST's Digital Signature Standard (DSS) in 2013. What took so long, you might ask?</p>&#13;
</section>&#13;
<section><span id="c07-sec-0052"/>&#13;
<h3 id="head-3-164">Digital Certificates and Certificate Authorities</h3>&#13;
<p id="c07-para-0188">The decade of the 1990s created the conditions in which the next major step forward in public key infrastructures became necessary. By January 1991, the world's first Web server was turned on, culminating the work by Tim Berners-Lee, with the strong support of Robert Cailliau and others, and it introduced the world to HTTP and HTML. Secure HTTP was developed in 1993 (originally named S-HTTP and later changed to HTTPS). By 1994, it was already becoming clear that millions of average, technically unsophisticated users around the world were ready to take personal interests and business online in a really big way. Many experts and governments could easily see the need for an infrastructure that supported all of the CIANA+PS attributes, if <i>electronic commerce</i> (a new word in the 1990s) was to become a profitable, safe, and secure reality.</p>&#13;
<p id="c07-para-0189">As Diffie-Hellman's own work suggested, growing a particular public key exchange <i>circle of trust</i> beyond just a few users needs a lot of work! Netscape is credited with inventing the Secure Sockets Layer (SSL) protocol, which defined the key elements of this new infrastructure, in 1994. It went through several iterations before its shortcomings led to the creation of TLS, described in more depth in the accompanying sidebar.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3"><span id="c07-fea-0013"/>&#13;
<h3 id="head-2-127">SSL, TLS, or HTTPS?</h3>&#13;
<section><span id="c07-sec-0053"/>&#13;
<p id="c07-para-0190"><span epub:type="pagebreak" id="Page_388" role="doc-pagebreak" aria-label="388"/>Try to research why the name of this protocol family went from SSL to TLS, and you find an interesting array of opinions and assertions but little in the way of demonstrable fact. One argument, put forth by Tim Dierks in 2014, says that the Internet Engineering Task Force (IETF) “had to make some changes to SSL 3.0 so it wouldn't look [like] the IETF was just rubberstamping Netscape's protocol…and thus was born TLS 1.0. And now, of course, in retrospect, the whole thing looks silly.”</p>&#13;
<p id="c07-para-0191">Another point to keep in mind is that HTTPS actually says “use HTTP over secure sockets,” which either meant “over SSL” or “over TLS,” depending on whom you ask and when.</p>&#13;
<p id="c07-para-0192">The bottom line is that one “S”—<i>secure</i> or <i>security</i>—in HTTPS is all that matters. So if you know how HTTPS works, you know how TLS plays its role in that, and you know how SSL used to do the same.</p>&#13;
<p id="c07-para-0193">SSL is still in use around the world, although it's been proven to have some serious vulnerabilities. As an SSCP, if you're confronted with users who still use it, get them to move to TLS!</p>&#13;
</section>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
</section>&#13;
<section><span id="c07-sec-0054"/>&#13;
<h3 id="head-3-165">Hierarchies (or Webs) of Trust</h3>&#13;
<p id="c07-para-0194">We now have some of the major building blocks to provide for trustworthy distribution of the software (and hardware) elements of a public encryption system. Before we can start building an infrastructure with them, we first need to look more closely at what “trustworthy” means and how we establish this sense of trust, share it with others, and encourage strangers to trust each other—or at least, trust enough to communicate with them.</p>&#13;
<p id="c07-para-0195">You first must recognize that a trust relationship between two parties is actually the sum of two one-way trust relationships: Bob <i>confers his trust</i> upon Carol, and Carol confers her trust upon Bob, which we observe by saying “Bob and Carol trust each other.” (If you think that looks like a grant of privilege from Bob to Carol, you're right!) A <i>transitive trust relationship</i> occurs when Carol trusts Alice, and so therefore because Bob trusts Carol, he now also trusts Alice. And since Alice trusts Ted, Bob and Carol each trust Ted. Thus a transitive chain of trust is created. (If Ted trusts Alice, but chooses not to trust Bob, you can see that the Web or mesh of trust relationships can get. . .murky.) Strictly speaking, these are peer-to-peer trust relationships, as no one person in this group is the designated or accepted authority regarding trustworthiness.</p>&#13;
<p id="c07-para-0196">Conversationally, we talk about chains of trust, webs of trust, and hierarchies of trust. Implicit in each of these ideas is the notion that those trust architectures have some “coin of the realm,” some agreed-to set of ideas, messages, data, or other things that are both the token of that trust and what is being exchanged in a trustworthy fashion. Money, for example, is exchanged as a token (a representation) of both value and of trust.</p>&#13;
<p>In information and communications systems terms, the foremost token of trust is a <i>certificate</i> that asserts that the identity of the certificate holder and the public key <span epub:type="pagebreak" id="Page_389" role="doc-pagebreak" aria-label="389"/>associated with that certificate are linked or bound with each other. This gives rise to two different concepts of how trust conferred by one node upon another can be scaled up to larger numbers of nodes:</p>&#13;
<ul class="square" id="c07-list-0023">&#13;
<li id="c07-li-0069"><i>A hierarchy of trust</i> exists when a single node is recognized as the authority for asserting or conferring trust. This conferring of trust can be delegated downward (made transitive) by that trust authority conferring a special status to a set of intermediate nodes, each of which can act as a trust authority for other intermediary nodes or end user nodes (recipients of trust), which (in tree structure terms) are the leaf nodes. <i>The trust anchor</i> is the trust authority, as the root of this tree of trust, conferring trust downward through any number of intermediaries, to the leaf nodes. Hierarchies of trust resemble forests of trees (in data structure terms!), with one root branching out to start many sub-trees, which may further branch, until finally we reach the <i>leaf</i> nodes at the very tip of each twig.</li>&#13;
<li id="c07-li-0070">A <i>certificate authority (CA)</i> is the anchor node of a hierarchy of trust, issuing the certificates that bind individual identities with their corresponding public keys.</li>&#13;
<li id="c07-li-0071"><i>A web of trust</i> has no designated or accepted single authority for trust, and acts in peer-to-peer fashion to establish chains of trust.</li>&#13;
</ul>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3">&#13;
<h3><img alt="Note" src="Images/note.png" class="left" width="76" height="53"/> Trees Grow Down?</h3>&#13;
<p id="c07-para-0198">In nature, of course, trees grow from their roots upward; information systems designers, out of habit, start drawing trees by putting the anchor node at the top of the page, and thus grow their digital trees downward.</p>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
<p id="c07-para-0199">In both hierarchies of trust and webs of trust, any given node can be a member of one or more trust relationships, and therefore be a member of one or more chains or webs of trust.</p>&#13;
<p id="c07-para-0200">In hierarchies of trust, end users, seeking to validate the trustworthiness of a certificate, infer that a certificate from a trusted end (leaf) node is trustworthy if the intermediary who issued it is, on up to the anchor. Webs of trust, by contrast, involve peer-to-peer trust relationships that do not rely on central certificate authorities as the anchors. Hierarchies of trust are much more scalable (to billions of certificates in use) than webs of trust. Both systems have drawbacks and issues, particularly with respect to certificate revocation, expiration, or the failure of a node to maintain trustworthiness. (The details of those issues are beyond the scope of the SSCP exam, but you do need to be aware that these issues exist and are not straightforward.)</p>&#13;
<p id="c07-para-0201">TLS, and secure HTTP (HTTPS), require the use of a certificate, granted by a certificate authority (CA). SSL and TLS established what was called the <i>chain of trust</i>, shown in <a href="#c07-fig-0004" id="R_c07-fig-0004">Figure 7.4</a>. The chain of trust starts with the CA itself generating a self-signed certificate, called a <i>root certificate</i>; this anchors the chain of trust. This root certificate can be used to generate and authenticate any number of intermediate certificates, which can also be used to authenticate (sign) other intermediate certificates. The end-entity, or end-user certificate, is the distant end of the chain of trust; it authenticates the end user's identity and is signed by an intermediate certificate issuer (or, hypothetically, it could be signed by the root authority). End-entity or <i>leaf</i> certificates <span epub:type="pagebreak" id="Page_390" role="doc-pagebreak" aria-label="390"/>(borrowing from tree structure terminology) are terminal—they cannot be used to sign other certificates of any kind.</p>&#13;
<figure> <img alt="Schematic illustration of Chains of trust" src="Images/c07f004.png" class="center" width="1141" height="734"/>&#13;
<figcaption>&#13;
<p><span class="figureLabel"><a href="#R_c07-fig-0004" id="c07-fig-0004" role="doc-backlink">FIGURE 7.4</a></span> Chains of trust</p>&#13;
</figcaption>&#13;
</figure>&#13;
<p id="c07-para-0202">Certificates of this kind allow browsers or other client-side programs to use a certification path validation algorithm, which has to validate that (a) the subject of the certificate matches the host name being connected to, and (b) the certificate is signed by a trusted authority, has not been revoked, and has not expired. <a href="#c07-fig-0005" id="R_c07-fig-0005">Figure 7.5</a> shows this in simplified form.</p>&#13;
<figure> <img alt="Schematic illustration of Certification path validation algorithm" src="Images/c07f005.png" class="center" width="1515" height="809"/>&#13;
<figcaption>&#13;
<p><span class="figureLabel"><a href="#R_c07-fig-0005" id="c07-fig-0005" role="doc-backlink">FIGURE 7.5</a></span> Certification path validation algorithm</p>&#13;
</figcaption>&#13;
</figure>&#13;
<p id="c07-para-0203"><span epub:type="pagebreak" id="Page_391" role="doc-pagebreak" aria-label="391"/>In 2008, the IETF published updated versions of the X.509 standard, which define these certificates and the protocols for their use.</p>&#13;
<p>The process starts with the applicant creating an asymmetric key pair; they must of course securely store their private key and keep it private but available to the PKI-using apps and tools on their system. The applicant then completes an X.509 <i>certificate signing request (CSR)</i>, which consists of the following:</p>&#13;
<ul class="square" id="c07-list-0024">&#13;
<li id="c07-li-0072">The certification request information, such as the distinguished name of the recipient (the entity to associate with the certificate) and related parameters</li>&#13;
<li id="c07-li-0073">The public key the applicant wants to associate with the certificate</li>&#13;
<li id="c07-li-0074">The signature algorithm used by the applicant</li>&#13;
<li id="c07-li-0075">The applicant's digital signature generated with that algorithm ( necessary to prevent an imposter from requesting a certificate be sent to them, but in the distinguished name of some other entity)</li>&#13;
</ul>&#13;
<p id="c07-para-0205">The CA then responds with a completed certificate.</p>&#13;
<p id="c07-para-0206">This process is, of course, dependent upon the hierarchies of trust (or the chains of trust) being established and valid to scale out to meet the growing demands for digital certificates. Previously, certificates could be requested to be valid for a maximum of two years, but as of September 1, 2020, this was reduced to a one-year maximum.</p>&#13;
<p id="c07-para-0207">As it turns out, <i>anyone</i> can become a self-authenticating certificate authority. This could be very helpful if your organization requires an isolated LAN in which certificate-based services are necessary but all use of those services stays within that LAN, for example. To become part of the world-spanning infrastructure, however, those wishing to become CAs have to have their certificate implementations adopted by the major Web browsers, which means getting their certificates bundled in with Edge, Firefox, Chrome, Safari, or Opera, for example. In fact, one of the key elements of these major vendor root certificate programs is that by becoming a root certificate member with them, your company adds significant value to their user community. CA applicants then have to go through rigorous technical demonstrations of their domains and their services. Each of those vendors has its own standards and processes to ensure that as a would-be CA, your company is not about to harm their reputation or the reputations or interests of their customers, partners, clients, and users worldwide.</p>&#13;
<p id="c07-para-0208">What this all boils down to is that if you want to be an anchor of many trust chains, we, the rest of the Internet-using world, really do require that you prove your trustworthiness, your reliability, and your integrity to us. This may be why the four CAs with the largest market share between them are IdenTrust, Comodo, DigiCert, and GoDaddy, according to W3Techs surveys. In 2017, Google and Mozilla rejected Symantec's certificates from their browser bundles, citing numerous repeated violations of trust—including incorrect or unjustified issuance of over 30,000 HTTPS certificates. Some of this involved issuing free “domain validated” certificates, thought to be a great way to stimulate further small business development; in reality, it made it trivially easy for malicious sites to spring into action, typically with phishing attacks on unsuspecting targets. Prior to this, Symantec had been the market leader; that same year, DigiCert acquired Symantec.</p>&#13;
<p id="c07-para-0209"><span epub:type="pagebreak" id="Page_392" role="doc-pagebreak" aria-label="392"/>The certificate validation process also demonstrates another important aspect of cybersecurity and cryptography that SSCPs must deal with every day: every system your organization uses is the result of an information technology supply chain, a chain that runs from designers and developers, through subsystems vendors and parts suppliers, to end-user sales and service, and then into your own organization's technology support staff. Every step of that process is a potential opportunity for threats to find vulnerabilities and exploit them. In fact, one definition of an advance persistent threat is that it is an organization or entity that looks at as much of the IT supply chain as it possibly can, seeking points of entry or influence.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0055"/>&#13;
<h3 id="head-3-166">Pretty Good Privacy</h3>&#13;
<p id="c07-para-0210">In much the same timeframe in which Rivest, Shamir, and Adleman were battling with the U.S. government over making powerful encryption available to private citizens, businesses, and others, another battle started to rage over a software package called Pretty Good Privacy. PGP had been created by Phil Zimmerman, a long-time antinuclear activist, in 1991; he released it into the wild via friend who posted it in Usenet and on Peacenet, which was an ISP that focused on supporting various grass-roots political and social movements around the world. Almost immediately, the government realized that PGP's use of 128-bit (and larger) encryption keys violated the 40-bit limit established for <i>export of munitions</i> as defined in the Militarily Critical Technologies List; the government began a criminal investigation of Zimmerman, his associates, and PGP. Zimmerman then published the source code of PGP and its underlying symmetric encryption algorithm (the Bassomatic) in book form (via MIT Press), which was protected as free speech under the First Amendment of the U.S. Constitution. By 1996, the government backed down, and did not bring criminal charges against Zimmerman.</p>&#13;
<p id="c07-para-0211">PGP uses a web of trust concept, but does embody a concept of key servers that can act as a decentralized mesh of repositories and clearinghouses. Its design provides not only for encryption of data in motion, but also for data at rest.</p>&#13;
<p id="c07-para-0212">Initially, PGP as a software product allowed end users to encrypt any content, whether that was a file or the body of an email message. Various distributions used different encryption algorithms, such as ElGamal, DSA, and CAST-128. The designs and source code of PGP have moved through a variety of commercial products, including the z/OS encryption facility for the IBM Z mainframe computer family.</p>&#13;
<p id="c07-para-0213">Described by some as being “the closest you're likely to get to military-grade encryption,” as of this writing there do not seem to be known methods, computational or cryptographic, for breaking PGP encryption. Wikipedia and other sources cite a 2006 case in which U.S. Customs agents could not break PGP-encrypted content, suspected to be child pornography, on a laptop they had seized. A bug in certain implementations of PGP was discovered in May 2018, which under certain circumstances could lead to disclosing the plaintext associated with a given ciphertext of emails encrypted by these email variants.</p>&#13;
<p id="c07-para-0214">Since its inception, PGP has evolved in several directions. It still is available in various free software and open source distributions; it's also available in a variety of commercial product forms.</p>&#13;
<section><span id="c07-sec-0056"/>&#13;
<h4 id="head-4-72">OpenPGP</h4>&#13;
<p id="c07-para-0215"><span epub:type="pagebreak" id="Page_393" role="doc-pagebreak" aria-label="393"/>A variety of efforts are underway to bring PGP and its use of different algorithms into an Internet set of standards. Some of these standards support the use of PGP by email clients; others look to specify the encryption suites used by PGP in different implementations. RFC 4880 is the main vehicle for change within the IETF for bringing PGP into the formally accepted Internet baseline. There is also work ongoing to develop a PGP-compliant open source library of JavaScript routines for use in Web applications that want to use PGP when supported by browsers running the app.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0057"/>&#13;
<h4 id="head-4-73">GPG</h4>&#13;
<p id="c07-para-0216">GNU Privacy Guard (GPG) is part of the GNU project, which aims to provide users with what the project calls the <i>four essential freedoms</i> that software uses should have and enjoy. GPG provides a free and open source implementation of the OpenPGP standard, consistent with RFC 4800. It provides key management and access modules, support for S/MIME and SSH, and tools for easy integration into a variety of applications. It's also available as Gpg4win, which provides GPG capabilities for Microsoft Windows systems, including a plugin for Outlook email.</p>&#13;
<p id="c07-para-0217"><i>Free</i>, in the context of free software, should be thought of in the same way as <i>free speech</i> rather than <i>free beer</i>, as explained on <code><a href="https://www.gnu.org/home.en.html">https://www.gnu.org/home.en.html</a></code>. Free software advocates assert that the conflux of corporate and government interests are all too willing to sacrifice individual freedom of choice, including the freedom to speak or to keep something private. Without freely available source code for important infrastructure elements such as GPG and the GNU variant of Linux, they argue, individuals have no real way to know what software to trust or what information and communications they can rely upon. Whether you agree or disagree with their politics, GPG and other free software systems are increasingly becoming common elements in the IT architectures that SSCPs need to support and defend.</p>&#13;
<p id="c07-para-0218">It is interesting to note that the German government initially donated 250,000 Deutschmarks (about $132,000) to the development and support of GPG.</p>&#13;
</section>&#13;
</section>&#13;
<section><span id="c07-sec-0058"/>&#13;
<h3 id="head-3-167">TLS</h3>&#13;
<p id="c07-para-0219"><i>Transport Layer Security</i> (TLS) provides for secure connections, but it's hard to say exactly where in the TCP/IP or OSI protocol stacks it actually sits. It runs on top of the transport layer, and yet it is treated by many applications as if it <i>is</i> the transport layer. But applications that use TLS must actively take steps to initiate and control its use. It's also further confusing, since the presentation layer is normally thought to provide encryption services for higher layers (such as the application layer in the OSI model). Perhaps it's best to think of it as providing services at the transport layer and above, as required, and leave it at that. It has largely replaced its predecessor, Secure Sockets Layer (SSL), which was found to be vulnerable to attacks on SSL's block cipher algorithms. As a result, SSL should be disabled if not removed from systems, to prevent attempted downgrade to SSL attacks. (SSL also had this identity problem in terms of which layer of the protocol stack it did or didn't belong to.)</p>&#13;
<p id="c07-para-0220"><span epub:type="pagebreak" id="Page_394" role="doc-pagebreak" aria-label="394"/>TLS had gone through two revisions since its first introduction, and in creating TLS 1.3, RFC 8446 in August 2018 added significant improvements to TLS. One key set of changes involved strengthening forward secrecy of TLS sessions. <i>Forward secrecy</i> (also known as <i>perfect forward secrecy</i>) provides for protection of past sessions in the event that the server's private key has been compromised. This protection is ensured by requiring a unique session key for every session a client initiates; in doing so, it offers protection against the Heartbleed exploit that affected SSL and OpenSSL, first reported in 2014. TLS 1.3 also removes support for other cryptographic and hash functions that have proven weak. These changes meant that the two-pass handshake for TLS 1.2 and 1.1 could be simplified and reduced to only one pass.</p>&#13;
<p id="c07-para-0221">The <i>TLS cipher suite</i> is the set of cryptographic algorithms used within TLS across its four major operational phases of key exchange and agreement, authentication, block and stream encryption, and message authentication. This suite is updated as older algorithms are shown to be too vulnerable and as new algorithms become adopted by the Internet Engineering Task Force (IETF) and the Web community. As with all algorithms and protocols involving security, the two versions of the TLS cipher suite now in common use, V1 and V1.2, are coming to their end of life. On June 30, 2018, SSL, TLS 1.1, and TLS 1.2 were declared obsolete by the IETF. The major browsers, such as Firefox, Chrome, and Bing, have been phasing them out in favor of their replacements. Note that cipher suites for TLS 1.2 and prior cannot be used by TLS 1.3, unless the cipher suite is declared to be compatible with TLS 1.3. Microsoft Windows systems have incorporated an “experimental” version of TLS 1.3, and as of summer 2021 it's not clear when they will incorporate it by default into releases of this OS. Be sure to check to see if your organization is using them anywhere. Note that the Payment Card Industry Data Security Standard (PCI DSS) requires use of the new versions, so any credit, debit, or payment processing systems you support may need to be double-checked as well.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0059"/>&#13;
<h3 id="head-3-168">HTTPS</h3>&#13;
<p><i>Hypertext Transfer Protocol Secure</i> (or HTTPS) is an application layer protocol in TCP/IP and the OSI model; it is simply HTTP (HyperText Transfer Protocol) using TLS (now that SSL is deprecated) to provide secure, encrypted interactions between clients and servers using hypertext. HTTPS is commonly used by Web browser applications. HTTPS provides important benefits to clients and servers alike:</p>&#13;
<ul class="square" id="c07-list-0025">&#13;
<li id="c07-li-0076">Authentication of identity, especially of the server's identity to the client</li>&#13;
<li id="c07-li-0077">Privacy and integrity of the data transferred during the session</li>&#13;
<li id="c07-li-0078">Protection against man-in-the-middle attacks that could attempt to hijack an HTTP session</li>&#13;
<li id="c07-li-0079">Simplicity</li>&#13;
</ul>&#13;
<p>By building directly on TLS, HTTPS provides for strong encryption of the entire HTTPS session's data content or payload, using the CAs that were preinstalled in the browser by the browser application developer (Mozilla, Microsoft, DuckDuckGo, Apple, etc.). This <span epub:type="pagebreak" id="Page_395" role="doc-pagebreak" aria-label="395"/>leads to a hierarchy of trust in which the end user should trust the security of the session only if the following conditions hold true:</p>&#13;
<ul class="square" id="c07-list-0026">&#13;
<li id="c07-li-0080">The browser software correctly implements HTTPS.</li>&#13;
<li id="c07-li-0081">Certificates are correctly installed in the browser.</li>&#13;
<li id="c07-li-0082">The CA vouches only for legitimate websites.</li>&#13;
<li id="c07-li-0083">The certificate correctly identifies the website.</li>&#13;
<li id="c07-li-0084">The negotiated encryption sufficiently protects the user's data.</li>&#13;
</ul>&#13;
<p id="c07-para-0224">Users should be aware that HTTPS use alone cannot protect everything about the user's Web browsing activities. HTTPS still needs resolvable IP addresses at both ends of the session; even if the content of the session is kept safe, traffic analysis of captured packets may still reveal more than some users wish. Metadata about individual page viewings may also be available for others to sniff and inspect.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0060"/>&#13;
<h3 id="head-3-169">Symmetric Key Algorithms and PKI</h3>&#13;
<p id="c07-para-0225">There's an elegance to the hybrid cryptographic systems model that should not go unappreciated by the SSCP. On the one hand, we are forced to use hybrid approaches because with any given technology base, we simply do not have enough computing power to affordably encrypt everything we need to protect using end-to-end asymmetric encryption, or get that encryption and decryption done in a reasonable amount of time. On the other hand, if such hardware capabilities did exist, they'd probably be sufficient to turn the computationally infeasible problems of breaking those asymmetric algorithms into easier, more affordable opportunities! Currently, TLS 1.0 through 1.2 support six different block or stream ciphers: RC4, Triple DES, AES, IDEA, DES, and Camellia. RC4 has been proven insecure and is left in TLS to support legacy systems; Camellia has been adopted as the International Data Encryption standard by the International Standards Organization and is similar in security and design to AES. With that in mind, let's take a closer look at DES and AES.</p>&#13;
<section><span id="c07-sec-0061"/>&#13;
<h4 id="head-4-74">DES</h4>&#13;
<p id="c07-para-0226">The Data Encryption Standard (DES) was, and in some experts' eyes still is, quite controversial. It was the first published and open competition by the U.S. government for a new symmetric key block encryption algorithm. It had elements (the “S-box” circuits) that some claimed NSA had inserted into the design to allow DES-encrypted traffic to be decrypted by NSA without needing the original encryption key; others, in turn, insisted these S-boxes were there to defeat still other back doors built into DES. (To date, no one has been able to convincingly confirm or deny these fears; the disclosure of many NSA secrets by Edward Snowden only reheated this simmering controversy. There were many arguments about the key length, which in IBM's original proposed used 64 bit keys, and which were downsized at NSA's insistence to 56 bits. (The key actually remains 64 bits in length, but since 8 bits are used for parity checking, the effective key length is still 56 bits.) DES was made a U.S. Federal Information Processing Standard in 1977, despite much outcry within the community that it was insecure right from the start.</p>&#13;
<p id="c07-para-0227"><span epub:type="pagebreak" id="Page_396" role="doc-pagebreak" aria-label="396"/>DES used 16 rounds of processing, and its design reflects the capabilities of 1970s-era hardware. (This was the era of the first 8-bit microprocessors, and most minicomputer architectures had only a 16-bit address space.)</p>&#13;
<p id="c07-para-0228">Although many people argued whether DES was in fact breakable, the Electronic Frontier Foundation (EFF) spent $250,000 to build a custom <i>DES Cracking Machine</i> to prove their point. It used brute force techniques (trying every possible key) and could break DES encryption in about two days' time.</p>&#13;
<p id="c07-para-0229">Significant work was done to try to tighten up DES, including the Triple DES standard published in 1999. But it remained unsecure, and DES in all forms was finally withdrawn as a U.S. government standard in 2002 when superseded by AES.</p>&#13;
<p id="c07-para-0230">DES remains important, not because it is secure, but because in the opinion of academics, industry, and government experts, it stimulated the explosive growth of the study of cryptography by those who had no connections at all to the military and intelligence communities and their cryptographers. Even today, it is still worth studying as you begin to understand cryptography, cryptanalysis, and common attack strategies.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0062"/>&#13;
<h4 id="head-4-75">AES</h4>&#13;
<p id="c07-para-0231">The Advanced Encryption Standard (AES) was published by the U.S. government as FIPS Publication 197 in November 2001. It replaced DES, and although like DES it is a symmetric block encryption algorithm, it is significantly more secure. It remains in widespread use today, usually as part of hybrid encryption systems. NIST ran another open, public competition for a replacement to DES, and the Rijndael (pronounced “rhine-dahl”) cipher by Vincent Rijmen and Joan Daeman was selected as the winner. It is the first and only publicly available cipher that is approved by NSA for use on government classified information up through Top Secret when used in an NSA-approved cryptographic module.</p>&#13;
<p id="c07-para-0232">AES is a multiple-round algorithm that executes very fast in hardware or software implementations. The number of rounds is in part determined by the size of the key: 10 rounds for 128-bit keys, 12 rounds for 192-bit keys, and 14 rounds for 256-bit keys.</p>&#13;
<p id="c07-para-0233">From a math perspective, AES looks pretty simple: nothing but a series of substitutions, permutations, and exclusive ORs, done on rows and columns of matrices in which plaintext and intermediate ciphertext are held. Surprisingly, it has withstood a number of attacks (in theory and in practice).</p>&#13;
</section>&#13;
</section>&#13;
<section><span id="c07-sec-0063"/>&#13;
<h3 id="head-3-170">Encapsulation for Security: IPSec, ISAKMP, and Others</h3>&#13;
<p id="c07-para-0234">Security practitioners also need to be familiar with several important uses of encapsulation as part of securing the public key infrastructure and the systems and applications that make use of it.</p>&#13;
<section><span id="c07-sec-0064"/>&#13;
<h4 id="head-4-76">IPSec</h4>&#13;
<p id="c07-para-0235"><i>Internet Protocol Security (IPSec)</i> reminds us that the first-generation Internet (or ARPANet) was built in a very different era than we're accustomed to now. Full racks of computing and communications equipment (standing 6 feet tall and 6 feet wide) were needed to implement <span epub:type="pagebreak" id="Page_397" role="doc-pagebreak" aria-label="397"/>what now lives on a small part of a chip in your smartphone; the CPUs in these computers might have had 64 KB worth of RAM, and their clocks ran at 1-microsecond cycle times! Simple protocols like network address translation (NAT) turned out to be quite demanding of the CPU and memory resources on these early minicomputers. Without more processing capability and speed, early Internet Protocol (even v4) could not deliver significant security services. As a result, the ARPANet and then the early Internet were designed on a best-efforts basis, one that trusted users to always do what was in the best interests of the network as a whole. (After all, they reasoned, would the U.S. Navy's computer centers want to disrupt the U.S. Air Force's?)</p>&#13;
<p id="c07-para-0236">IPSec was developed during the late 1980s and early 1990s to provide Internet-layer (Layer 3) security functions, specifically the authentication and encryption of packets as they are transferred around the Internet. It needed to provide a variety of security benefits: peer authentication, sender (data origination) authentication, data integrity and confidentiality, and protection against replay attacks. IPSec can provide these services automatically, without needing application layer interaction or setup.</p>&#13;
<p id="c07-para-0237">IPSec provides two methods of operation, known as transport mode and tunnel mode. <i>Transport mode</i> encrypts only the payload (data content) of the IP packets being sent, which leaves all of the routing information intact. However, when transport mode uses the IPSec authentication header, services like NAT cannot operate because this will invalidate the hash value associated with the header and the routing information in it. <i>Tunnel mode</i>, by contrast, encrypts the entire IP packet, routing headers and all; it then encapsulates that encrypted payload into a new IP packet, with a new header. This can be used to build virtual private networks (VPNs) and can also be used for private host-to-host chat functions. Since the as-built packets from the sending system are encrypted and encapsulated for actual transmission through the network, any packet-centric services such as NAT can function correctly.</p>&#13;
<p id="c07-para-0238">IPSec can be implemented in three different ways. It's normally built right into the operating system by including its functions within the <i>IP stack</i> (the set of operating systems service routines that implement the Internet Protocol in that environment). When such modification of the operating system is not desired, IPSec can be implemented as a separate set of functions that sit (in effect) between the device drivers and the operating system's IP stack, earning it the name <i>bump-in-the-stack</i>. If external cryptoprocessors are used (that is, not under the direct, integrated control of the operating system), it's also possible to do what's called a <i>bump-in-the-wire</i> implementation.</p>&#13;
<p>Use of IPSec in IPv4 systems was left as an option to the systems administrators; for IPv6 systems, its use is mandatory.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3">&#13;
<h3><img alt="Tip" src="Images/tip.png" class="left" width="72" height="53"/> Implementing Secure IPv6</h3>&#13;
<p id="c07-para-0241">If your organization is planning to migrate to IPv6 or is already partially on that path, you'll find NIST 800-119, issued in 2010, to have a wealth of good insights to offer.</p>&#13;
<p id="c07-para-0242">You'll want to complement that with current white papers, how-tos, and user guides from the network and systems vendors that your organization is using (or thinking about having involved) in the migration.</p>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
</section>&#13;
<section><span id="c07-sec-0065"/>&#13;
<h4 id="head-4-77">ISAKMP</h4>&#13;
<p id="c07-para-0243"><span epub:type="pagebreak" id="Page_398" role="doc-pagebreak" aria-label="398"/>During the late 1980s a number of approaches were developed that used <i>security associations</i> (SAs) as a way of defining the relationship between a set of algorithms and their associated cryptovariables (and other parameters) that encryption services would use to protect communications over IP networks. <i>The Internet Security Association Key Management Protocol</i> (ISAKMP) provides the management processes that peer systems can use to create, manage, and use security associations; generate keys; and collaborate on mitigating various threats.</p>&#13;
<p id="c07-para-0244">ISAKMP is not a key exchange protocol. It focuses instead on the creation, sharing, modification, and revocation or deletion of SAs. As a result, systems using ISAKMP must also be using some form of key exchange, such as Internet Key Exchange (IKE) or Kerberized Internet Negotiation of Keys (KINK).</p>&#13;
</section>&#13;
<section><span id="c07-sec-0066"/>&#13;
<h4 id="head-4-78">IKE</h4>&#13;
<p id="c07-para-0245">Building on ISAKMP, the Internet Key Exchange (IKE) protocol makes use of X.509 certificates as its authentication mechanism. It then establishes a Diffie-Hellman key exchange process, with which it generates the shared session key. Originally released in 1998, IKEv1 ran into a number of issues, prompting an update in 2005 to IKEv2. This, too, has demonstrated a number of issues, which may result in exploitable vulnerabilities in systems using IKE or in service interruptions. A number of extensions have been adopted to resolve some of these issues.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0067"/>&#13;
<h4 id="head-4-79">Tunneling for Remote Access Content Protection</h4>&#13;
<p id="c07-para-0246"><i>Tunneling</i>, as we saw in <a href="c05.xhtml">Chapter 5</a>, is the process of having one protocol running inside (or over) another. Tunneling is a natural approach to protecting the content of Internet traffic during transmission; think of how TOR or other dynamic routing tunneling approaches effectively fragment data being sent by routing each packet independently through a web of intermediate relay nodes. Virtual private network (VPN) systems can provide security services, including encryption, but to be effective it may take considerable work to make sure that all parties using the VPN are using compatible systems that are properly configured.</p>&#13;
<p id="c07-para-0247">These virtual private networks often make use of the point-to-point tunneling protocol (PPTP) or the Layer 2 Tunneling Protocol (L2TP) as a means of coordinating the authentication processes and for encapsulating the data to be exchanged through the tunnel. A number of commercial VPN systems are available for organizations to choose from, as well as the OpenVPN open source software VPN application.</p>&#13;
<p id="c07-para-0248">Tunneling can become quite complex to design and implement in a user-friendly, turnkey fashion. There are many opportunities to misconfigure systems in ways that allow for classic security vulnerabilities, such as single-factor authentication with very weak user IDs and passwords, to come back to life and haunt the unwary systems and security administrators as a result.</p>&#13;
</section>&#13;
</section>&#13;
</section>&#13;
<section aria-labelledby="head-2-128"><span id="c07-sec-0068"/>&#13;
<h2 id="head-2-128">Applying Cryptography to Meet Different Needs</h2>&#13;
<p id="c07-para-0249"><span epub:type="pagebreak" id="Page_399" role="doc-pagebreak" aria-label="399"/>There are many places where cryptography is put to use in ways that go well beyond what we can cover in this book. That said, let's take a closer look at a number of protocols and applications that support some of these needs.</p>&#13;
<section><span id="c07-sec-0069"/>&#13;
<h3 id="head-3-171">Message Integrity Controls</h3>&#13;
<p>No matter what the purpose, intent, or process used for any communication, <i>message integrity</i> has a profound effect on the success or failure of that communication. We've all had the experience of receiving (or sending) an email message in which the words could be read but the meaning was unclear; imagine the same thing happening when you e-file your income tax return or submit an order for parts to a vendor overseas. A variety of message integrity controls (MICs) have been introduced over the years to deal with this, which can be grouped into two broad classes based on the kinds of errors they are attempting to protect against:</p>&#13;
<ul class="square" id="c07-list-0027">&#13;
<li id="c07-li-0085"><b>Accidental changes:</b> Any form of electronic messaging system is subject to environmental interference, thermal noise, and intermittent failure to correctly function. Any of these (and more) can result in occasional one-bit changes to a message, clusters of bits being changed, or the whole message being corrupted. Checksums, parity bits, and hash functions are often used, singly, or in combination, for detecting and correcting these errors.</li>&#13;
<li id="c07-li-0086"><b>Intentional changes:</b> Deliberate attempts by a hostile party can result in isolated bits, patterns of bits throughout a message, or the entire contents of a message being altered or replaced with spurious content. The best defenses against these types of integrity attacks involve the use of digital signatures, keyed hashes, message authentication codes (MACs), and hashed message authentication codes (HMACs).</li>&#13;
</ul>&#13;
<p id="c07-para-0251">MICs are all around us. Perhaps one of the most ubiquitous ones is the Luhn checksum, used to authenticate numbers used for national insurance, banking, or credit card accounts, for device IDs like IMEI numbers, and many others that are central to our everyday lives. This algorithm, created by Hans Peter Luhn at IBM in 1960, can detect any single-digit error and many transpositional errors. It has been extended and complemented with a number of other algorithms.</p>&#13;
<p id="c07-para-0252">MACs and HMACs are used to produce <i>message digests</i>, which provide other, more powerful ways to protect the integrity and the authenticity of a message or file. By comparing the digest sent (or published) for the original message or file with one locally computed by the recipient or user, a mismatch signals that message integrity or authenticity are in doubt. HMACs do not support error <i>correction</i>, nor do they protect the confidentiality or privacy of the message or file content.</p>&#13;
<p id="c07-para-0253">The properties of a strong hash function (small, fixed length output, uniqueness, nonreversible) are also required for a strong MAC or HMAC. Both can use almost any hash <span epub:type="pagebreak" id="Page_400" role="doc-pagebreak" aria-label="400"/>function, but the main difference is that the more general MAC approach is a one-pass process (i.e., it uses a single application of the hash function), while the HMAC specification defines a two-pass process. As a result, HMAC provides a far stronger defense against a variety of hash function attacks and as a result has remained as the recommended approach (if not required by some compliance regimes). HMAC has been standardized in FIPS publication 198 and supports IPSec, SSH, TLS, and JSON Web Tokens, among others.</p>&#13;
<p id="c07-para-0254">HMAC implementations are named to reflect the cryptographic function they use, such as HMAC-SHA256. As with anything in cryptography, the protection provided by that HMAC depends upon the strength of the chosen algorithm, the key size and quality, and the size of the hash output (the digest). Of course, attention to proper implementation is a must!</p>&#13;
</section>&#13;
<section><span id="c07-sec-0070"/>&#13;
<h3 id="head-3-172">S/MIME</h3>&#13;
<p id="c07-para-0255">Secure Multipurpose Internet Mail Extensions (S/MIME) provides presentation layer authentication, message integrity, nonrepudiation, privacy, and data security benefits to users. Using PKI, it requires the user to obtain and install their own certificate, which is then used in forming a digital signature. It provides end-to-end encryption of the email payload and thus makes it difficult for organizations to implement outgoing and incoming email inspection for malware or other contraband without performing this inspection on each end-user workstation after receipt and decryption.</p>&#13;
<p id="c07-para-0256">S/MIME has other issues, which may mean it is limited in the security it can offer to users of organizational email systems. Its signatures are <i>detached</i>—that is, they are not tied to the content of the message itself, so all that they authenticate is the sender's identity and not that the sender sent the message in question. In May 2018, the EFF announced that there were critical vulnerabilities in S/MIME, particularly when forms of OpenPGP are used. EFAIL, as this vulnerability is called, can allow attackers to hide unknown plaintext within the original message (using various HTML tags). EFAIL affects many email systems, and as such, it will require much coordination between vendors to fix.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0071"/>&#13;
<h3 id="head-3-173">DKIM</h3>&#13;
<p id="c07-para-0257">Domain Keys Identified Mail (DKIM) provides an infrastructure for authenticating that an email came from the domain its address information claims it did and was thus (presumably) authorized by that domain operator or owner. It can prevent or limit the vulnerability of an organization's email system to phishing and email spam attacks. It works by attaching a digital signature to the email message, and the receiving email service validates that signature. This confirms that the email itself (and possibly some of the attachments to it) were not tampered with during transmission, providing a degree of data integrity protection. As an infrastructure service, DKIM is not normally visible to the end users (senders or recipients), which means it does not function as an end-to-end email authentication service.</p>&#13;
<p id="c07-para-0258">Both the original RFC that proposed DKIM and work since then have identified a number of possible attack vectors and weaknesses. Some of these are related to the use of short (weak) <span epub:type="pagebreak" id="Page_401" role="doc-pagebreak" aria-label="401"/>encryption keys that can easily be brute force attacked; others relate to ways that clever spammers can spoof, misroute, forward, or otherwise misuse the email infrastructure in ways DKIM cannot help secure.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0072"/>&#13;
<h3 id="head-3-174">Blockchain</h3>&#13;
<p id="c07-para-0259">Think about the message digest process; it produces a hash value of a message (or file) that demonstrates that the content of that message has not been changed since the message digest was computed. A <i>blockchain</i> is nothing more than a series of messages, each with its own message digest, that taken together represent a transaction history about an item of interest; the message digest for the first block is computed normally, and then this is used as an input into the message digest for the next block, and so on. Thus, any attempt to make a change to the content of a block will invalidate all subsequent block-level message digests.</p>&#13;
<p id="c07-para-0260">A <i>public blockchain</i> is one in which anyone can read the content of each block of the message, and can independently audit that blockchain by starting at its <i>genesis</i> (or root) block and sequentially computing and comparing the digests. Public blockchains also allow anyone to add blocks to them. A <i>private blockchain</i>, by contrast, has its contents and all of its access permissions restricted by its systems owners.</p>&#13;
<p id="c07-para-0261">A digital wallet uses this approach when it treats each new transaction against the wallet as a new block. The current balance in your wallet is represented by the message digest of the entire wallet, which is the sequential digest of each transaction from the first onward. When a new transaction is posted, that existing balance message digest is used as input to compute the message digest of everything associated with the transaction. (If the wallet is tracking a bank or currency account, then this might be information about the date, amount, other party, purpose, and the resulting balance in the wallet or account.)</p>&#13;
<p>By providing strong nonrepudiation and data integrity for the transactions contained in the individual blocks, blockchains can implement digital provenance systems:</p>&#13;
<ul class="square" id="c07-list-0028">&#13;
<li id="c07-li-0087">Chain of custody control, auditing, and recordkeeping for cyberforensics could use blockchains to irrefutably record who touched the evidence, when, how, and what they did to it.</li>&#13;
<li id="c07-li-0088">Provenance systems, such as for hardware or documents, could use blockchains to prove the authenticity of the underlying data to help prove that safety-critical components (physical hardware, computer or network hardware, software, or firmware) are in fact what they claim to be. Chain of custody recordkeeping systems, in particular, are natural applications for private blockchains.</li>&#13;
<li id="c07-li-0089">Representations of any kind of value can be made extremely difficult to counterfeit.</li>&#13;
</ul>&#13;
<p>It is this last that explains the dramatic rise in the use of cryptocurrencies—the use of blockchains to represent money and to record and attest to the transactions done with that money:</p>&#13;
<ul class="square" id="c07-list-0029">&#13;
<li id="c07-li-0090">The cryptocurrency <i>miner</i> uses significant computing power to generate a new unique cryptocurrency identifier (similar to printing a new piece of paper currency with a unique combination of serial numbers, paper security markings, etc.). This “cryptodollar” is represented by a blockchain and is stored in the mining company's wallet.</li>&#13;
<li id="c07-li-0091"><span epub:type="pagebreak" id="Page_402" role="doc-pagebreak" aria-label="402"/>Bob buys that cryptodollar from the miner, and the underlying blockchain transfers to Bob's wallet; the new message digest reflects this transfer into Bob's wallet. The blockchain in the miner's wallet is updated to show this transaction.</li>&#13;
<li id="c07-li-0092">Later, Bob uses that cryptodollar to buy something from Ted's online store; the blockchain that is Bob's wallet is updated to reflect the sell, and the blockchain that is Ted's wallet is updated to reflect the buy.</li>&#13;
</ul>&#13;
<p id="c07-para-0264">This is shown in simplified form in <a href="#c07-fig-0006" id="R_c07-fig-0006">Figure 7.6</a>.</p>&#13;
<figure> <img alt="Schematic illustration of the blockchain concept" src="Images/c07f006.png" class="center" width="1173" height="688"/>&#13;
<figcaption>&#13;
<p><span class="figureLabel"><a href="#R_c07-fig-0006" id="c07-fig-0006" role="doc-backlink">FIGURE 7.6</a></span> The blockchain concept</p>&#13;
</figcaption>&#13;
</figure>&#13;
<p id="c07-para-0265">If all we do is use strong message digest functions in the blockchain, we provide some pretty powerful nonrepudiation and data integrity to our cryptocurrency users. We must combine this with a suitable exchange of public and private keys to be able to protect the confidentiality of the data and to ensure that only people or processes Bob authorizes (for example) can see into Bob's wallet, read the transaction history that is there, or initiate a new transaction.</p>&#13;
<p id="c07-para-0266">Finally, cryptocurrency systems need to address the issue of authority: who is it, exactly, that we trust as a miner of a cryptodollar? Bitcoin, for example, solves this problem by being a completely decentralized system with no central bank or authority involved. The miners are actually the maintainers of copies of the total Bitcoin ledger, which records every Bitcoin owner's wallet information and its balance; voting algorithms provide for each distributed copy of the ledger to synchronize with the most correct copy. This maintenance function is computationally intensive, typically requiring many high-performance workstations running in parallel, and so the Bitcoin system rewards or incentivizes its miners by letting them earn a fraction of a Bitcoin as they maintain the system's ledger.</p>&#13;
<p id="c07-para-0267">One irony of the rise in popularity and widespread adoption of blockchains and cryptocurrencies is the false perception that since money launderers, drug smugglers, and organized crime use these technologies, anyone using them must also be a criminal. Of course, nearly all criminals use money, but that does not mean that all users of money are criminals!</p>&#13;
</section>&#13;
<section><span id="c07-sec-0073"/>&#13;
<h3 id="head-3-175">Data Storage, Content Distribution, and Archiving</h3>&#13;
<p><span epub:type="pagebreak" id="Page_403" role="doc-pagebreak" aria-label="403"/>Messaging, content distribution, and archiving can all have similar information security requirements, and they often make use of the same cryptographic services to achieve the degree of CIANA+PS that their user organizations require. They just apply these in perhaps a different sequence of steps:</p>&#13;
<ul class="square" id="c07-list-0030">&#13;
<li id="c07-li-0093">Secure email and messaging systems are all used to create and sustain conversations (usually between human users, but increasingly including nonhuman users as well). Email and message content is often generated moments before being sent. This often requires that message authentication, integrity checks, and content confidentiality be performed as the recipient receives or opens the message. Nonrepudiation and proof of delivery occur as or immediately after the message is opened.</li>&#13;
<li id="c07-li-0094">Content delivery systems can be either streaming live content to multiple recipients or delivering files and other content generated previously. Most use cases do not require integrity checks (such as with streaming entertainment services), while others (such as those distributing critical software or data updates to endpoints and servers) may require integrity checks as well as a greater degree of content security, nonrepudiation and authenticity checking, and proof of delivery.</li>&#13;
<li id="c07-li-0095">Archiving generally involves storing datasets (which may involve terabytes or more of content) for possible retrieval and reuse sometime later. A growing number of archiving use cases place stringent requirements for confidentiality and integrity checks, while the cataloging and management of archival data is demanding more in the way of authenticity, nonrepudiation, and proof of access (delivery) functions.</li>&#13;
</ul>&#13;
<p id="c07-para-0269">The common issue in all of these use cases is the safety and security of the various cryptologic assets that power the encryption of the content, the generation of the HMACs, and the certificates that support the public and private keys used in these various processes. Failure to properly store, manage, and protect these keys and certificates could have two potentially disastrous outcomes: the archived content could be unusable because it cannot be decrypted; or the compromise of its keys could lead to unauthorized disclosure and use of its contents, and the contents of any other data secured with that same set of keys.</p>&#13;
<p id="c07-para-0270">Timing, as they say, is everything. In the messaging and email cases, one could (hypothetically) generate a new session key for each email or message and have high-risk user entities regenerate their public keys, private keys, and certificates very frequently. Larger enterprises could find this to be a very resource-intensive strategy, unless they confined its use to only a very few entities, systems, and use cases. By contrast, archival storage must support both business continuity and data retention needs (both legal and business process–related ones); with some data needing to be retained for three to five years, long-term archival storage is probably the stressing requirement for an organization's cryptologic asset storage and management systems.</p>&#13;
<p id="c07-para-0271">As this can affect organizations of any size, from SOHO through SMB and on up to the largest of enterprises, it's little wonder that safe, secure, reliable, trustworthy storage and management of cryptographic keys, certificates, and related assets is demanding greater attention from security professionals.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0074"/>&#13;
<h3 id="head-3-176">Steganography</h3>&#13;
<p id="c07-para-0272"><span epub:type="pagebreak" id="Page_404" role="doc-pagebreak" aria-label="404"/><i>Steganography</i> is the art of hiding one message inside another so that the hidden message can be stored, transmitted, received, and recovered by its true recipient without the knowledge and consent of those who created, sent, received, and used the carrier message. Steganography can be used on any form of data and can be in the body of a message, one or more file attachments to a message, or data being streamed as packets or frames from a source to one or multiple destinations.</p>&#13;
<p id="c07-para-0273">It is often thought of only in terms of hiding data within an image, such as by using one or two of the low-order bits of each pixel (or for its luminance value only) for storing the content to be hidden. Perhaps an easier way to visualize steganography at work is to realize that many common data file formats, whether for imaging, documents, databases, or archival datasets, use a markup language or tagged format (of one kind or another) as a way of combining metadata with the image data itself. Since many of these file formats are also extensible, most applications simply ignore tags that they have not been programmed to deal with.</p>&#13;
<p id="c07-para-0274">Steganography has been used, for example, to hide command and control data within DNS message traffic. (DNS does not, for example, validate that a named domain or element in a directory tree actually exists.) These types of techniques have been used in attacks on oil and gas production facilities in the Middle East and may be part of other attack patterns as well.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0075"/>&#13;
<h3 id="head-3-177">Access Control Protocols</h3>&#13;
<p id="c07-para-0275">One of the most important uses of cryptographic systems is in implementing access control protocols, such as SSH, LDAP, Kerberos, or SSO. We looked at these in greater depth in <a href="c06.xhtml">Chapter 6</a>, “Identity and Access Control,” so refer to that chapter to see them in context.</p>&#13;
<p>Looking at these protocols from a cryptographic perspective, we can see that these protocols and processes provide security by a variety of means:</p>&#13;
<ul class="square" id="c07-list-0031">&#13;
<li id="c07-li-0096">Using (or requiring) TLS for direct support</li>&#13;
<li id="c07-li-0097">Operating via HTTP or HTTPS, based on choices made during local implementation</li>&#13;
<li id="c07-li-0098">Relying on X.509 certificates for authentication, which means they also rely on their issuing trust hierarchy</li>&#13;
<li id="c07-li-0099">Relying on IPSec and its security associations to negotiate the selection and use of authentication and key exchange protocols</li>&#13;
<li id="c07-li-0100">A mix of the above</li>&#13;
</ul>&#13;
<p id="c07-para-0277">In addition, protocols such as RADIUS use tunneling as part of their approach to providing security protection of their authentication and authorization exchanges with clients and resource servers.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3"><span id="c07-fea-0014"/>&#13;
<p><img alt="Realworld" src="Images/realworld.png" class="left" width="239" height="36"/></p>&#13;
<h3 id="head-2-129">Architecting Your Secure E-Registration and E-Voting System</h3>&#13;
<section><span id="c07-sec-0076"/>&#13;
<p id="c07-para-0278"><span epub:type="pagebreak" id="Page_405" role="doc-pagebreak" aria-label="405"/>The work you've done on this project should now give you a pretty good understanding of the needs for information security. It's probably time to offer some strawman implementation thoughts.</p>&#13;
<p id="c07-para-0279">How might some of the cryptographic systems we've explored be put to use in your system?</p>&#13;
<p id="c07-para-0280">“Test-fit” some of those systems, and see what that reveals to you—either about the cryptosystems elements themselves, your project, or both.</p>&#13;
</section>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
</section>&#13;
</section>&#13;
<section aria-labelledby="head-2-130"><span id="c07-sec-0077"/>&#13;
<h2 id="head-2-130">Managing Cryptographic Assets and Systems</h2>&#13;
<p id="c07-para-0281">Throughout this chapter, we've seen that keeping a cryptographic system safe, secure, and trustworthy requires keeping its own secrets safe—and this means managing, protecting, and securing its keys, cryptovariables, and other elements necessary for that system to function properly. Taken together, those are the <i>cryptologic assets</i> of any organization. Personal computing users, even one who uses only a single smartphone, are relying on cryptologic assets to keep their information safe and secure. So is their bank or the other online services that user interacts with. We've also seen that keeping <i>any</i> system secure and reliable is far, far more easily and reliably done if that system is <i>managed</i> properly. This means that <i>all</i> systems assets must be identified and enumerated, characterized, and kept track of with an <i>asset inventory</i>; that inventory is then combined with the information classification and categorization registry to create the <i>information security baseline</i>, which correlates risk assessment findings with assets.</p>&#13;
<p>Failing to properly manage cryptologic assets can bring significant risks to the organization. For example, KeyFactor and Ponemon Institute published findings in 2019 that traced poor digital certificate management to five major impacts to organizations:</p>&#13;
<ul class="square" id="c07-list-0032">&#13;
<li id="c07-li-0101">Failing to meet compliance standards</li>&#13;
<li id="c07-li-0102">Losses due to phishing and MITM attacks</li>&#13;
<li id="c07-li-0103">Code signing and key misuse errors</li>&#13;
<li id="c07-li-0104">Unexpected systems outages when certificates expired</li>&#13;
<li id="c07-li-0105">Systems and server outages and other issues due to misuse of certificates and keys</li>&#13;
</ul>&#13;
<p id="c07-para-0283">You may recall the headlines from January 2019, when the U.S. government's “shutdown” due to budgetary disputes led to many government agencies' digital certificates expiring and not being renewed for a while. Users were inconvenienced, and many would not go past the “expired certificate” <span epub:type="pagebreak" id="Page_406" role="doc-pagebreak" aria-label="406"/>warnings from their browsers to continue to gain necessary online services. Attackers, too, found it much easier to stage machine-in-the-middle (MITM) attacks because of this.</p>&#13;
<p id="c07-para-0284"><i>Digital certificate management</i>, <i>TLS key (or certificate) management</i>, and cryptologic key management are all aspects of this same larger management need. Responding to this need, many systems and security applications vendors, and managed security services providers, are now providing a range of capabilities that organizations large and small can use to bring these vital assets under management.</p>&#13;
<p>There is, however, no current consensus on what constitutes good, proper, or sufficient <i>cryptographic hygiene</i>. There is not an agreed-to set of tactics, techniques, or procedures to follow and no published checklist to use to see if your organization is doing this well enough to be safe. Broadly speaking, cryptologic asset management (or cryptographic hygiene) covers the lifecycle of the cryptosystems in use and the assets they protect, including the following:</p>&#13;
<ul class="square" id="c07-list-0033">&#13;
<li id="c07-li-0106">Acquisition (registration or enrollment) of a certificate</li>&#13;
<li id="c07-li-0107">Discovery of certificates already in use</li>&#13;
<li id="c07-li-0108">Validation of existing certificates and ones that are presented to your systems by others as part of identity and access authentication</li>&#13;
<li id="c07-li-0109">Deployment, activation, and use within your systems and infrastructure</li>&#13;
<li id="c07-li-0110">Revocation, which is necessary when services that use that certificate are terminated or when a suspected compromise or loss of integrity occurs</li>&#13;
<li id="c07-li-0111">Renewal and replacement of certificates prior to their expiration to assure smooth transition (without leading to a self-inflicted DoS attack)</li>&#13;
<li id="c07-li-0112">Destruction</li>&#13;
<li id="c07-li-0113">Audit</li>&#13;
</ul>&#13;
<p id="c07-para-0286">Help is on the way. NIST and the U.S. National Cybersecurity Center of Excellence (NCCoE) brought together a number of systems vendors and user perspectives to produce NIST SP 1800-16, Securing Web Transactions Practice Guide, which was published in 2020. At 432 pages, plus three additional supporting documents, it's not a light read, but it does provide a thoughtful and thought-provoking roadmap for organizations as they begin their journey toward more secure certificate and cryptologic asset management.</p>&#13;
<p id="c07-para-0287">The payoffs of an ongoing and effective cryptologic asset management program can be substantial. Compliance audits can become more successful, with their findings emphasizing more on ongoing improvements to meet evolving threats, rather than focusing on lack of proper systems management and configuration control. Many industries already have demanding standards that require the use of encryption for data protection and systems integrity. Safety-critical and mission-critical systems can be better protected, which can reduce risk exposure (especially to high-impact, catastrophic consequences of safety-related systems compromises).</p>&#13;
</section>&#13;
<section aria-labelledby="head-2-131"><span id="c07-sec-0078"/>&#13;
<h2 id="head-2-131">Measures of Merit for Cryptographic Solutions</h2>&#13;
<p><span epub:type="pagebreak" id="Page_407" role="doc-pagebreak" aria-label="407"/><i>Measures of merit</i> are used to indicate the relative worth, value, or success of a particular process, activity, or investment. Some measures of merit are of sufficient strategic importance that they are used as key performance indicators (KPIs), while others have their greatest utility at the tactical and operational level. All such measures or assessments are essentially trying to answer these two fundamental questions:</p>&#13;
<ul class="square" id="c07-list-0034">&#13;
<li id="c07-li-0114">Is the measured system performing correctly and effectively?</li>&#13;
<li id="c07-li-0115">What is it costing us, in terms of ongoing investment, maintenance, and impact to day-to-day operations and workflows?</li>&#13;
</ul>&#13;
<p id="c07-para-0289">For cryptographic systems, the first question assesses the relative <i>cryptographic strength</i> of the system. This is often expressed in terms like the <i>work factor</i>, which is a way of expressing the amount of time an attacker would have to spend to break the encryption being used, such as to recover the encryption key or circumvent a message integrity check. Another way of expressing cryptographic systems strength is with some key size equivalent means, such as the RSA key sizes and the corresponding ECC keys needed to obtain comparable levels of protection. All of these are just <i>estimates</i>, of course; they are attempts to predict the likelihood that an attack can succeed if given so many CPU-years of computing power to spend on their efforts.</p>&#13;
<p id="c07-para-0290"><i>Utility</i>, or ease of use, may actually have a greater role to play in delivering the promise of strong cryptographic security. Cryptographic measures that are hard for end users to work with, or that add too much delay, confusion, or opportunity for errors to their workflows, may end up being ignored or circumvented. (Think about all those passwords written on sticky notes stuck to the undersides of keyboards.) Cryptography that is built into workflows in seamless, near-invisible ways, that leave the administrative details (such as signature generation and certificate renewal) to the administrators, allows designers to focus its use on the tasks and information assets that need its protection most, while eliminating or reducing opportunities for users to avoid using it properly (or at all).</p>&#13;
<p>From the standpoint of the owners, operators, and end users, what makes one cryptographic system a preferred solution over others? Key questions to consider when making such assessments might include the following:</p>&#13;
<ul class="square" id="c07-list-0035">&#13;
<li id="c07-li-0116">What are the costs to implement, maintain, manage, and operate the system?</li>&#13;
<li id="c07-li-0117">Does the system provide security commensurate with the value of the information and decisions being used?</li>&#13;
<li id="c07-li-0118">Are the throughput, flow rate, and other runtime performance impacts to our business processes within reason?</li>&#13;
<li id="c07-li-0119">Is the system simple for our users to use so that we minimize avoidance or corner-cutting by staff?</li>&#13;
<li id="c07-li-0120"><span epub:type="pagebreak" id="Page_408" role="doc-pagebreak" aria-label="408"/>How does the system add value, cost, or both to customer and prospective customer interactions with us?</li>&#13;
<li id="c07-li-0121">How does using the system enhance or maintain our reputation for trustworthiness?</li>&#13;
<li id="c07-li-0122">What new risks does investing in or using this system possibly expose us to?</li>&#13;
</ul>&#13;
<p id="c07-para-0292">It's fairly straightforward to trace most of these to technical performance measures, such as speed of processing, complexity of the tasks to initialize a new user, user training, and the known weaknesses in such systems. Integrating those parameters together into well-considered value propositions, however, is a necessary part of making such investment decisions—or making the decision that your current cryptosystems aren't fulfilling your needs in cost-effective ways.</p>&#13;
</section>&#13;
<section aria-labelledby="head-2-132"><span id="c07-sec-0079"/>&#13;
<h2 id="head-2-132">Attacks and Countermeasures</h2>&#13;
<p id="c07-para-0293">The good news is that there is one proven unbreakable cryptosystem—the ancient one-time pad! Claude Shannon's work at Bell Labs proved that the one-time pad is unbreakable, provided that the keying material is truly random, not reused, kept secret, and of equal or greater length than the message. Take a close look at that list of provisos, though, and you'll see that making practical one-time pad systems that are scalable to millions of users, simple to use, and yet secure day after day is just a bit of a challenge. All cryptosystems, from one-time pads through the most advanced of public key–based systems, still suffer from all of the problems that face other symmetric key systems—with distribution and key management being the hardest things to keep secure and scalable.</p>&#13;
<p id="c07-para-0294">As you've seen, hybrid cryptographic systems are a form of a one-time pad, and like all one-time pad systems, they are still only as strong as the randomness the session key can provide.</p>&#13;
<p>Recall what we said earlier about what sort of attackers might be doing any or all of these kinds of attacks on a cryptosystem. Non-malicious attacks might include the following:</p>&#13;
<ul class="square" id="c07-list-0036">&#13;
<li id="c07-li-0123">Law enforcement and national security organizations when taking captured devices or systems (or ones seized under a court order or other lawful process) and examining them for evidence</li>&#13;
<li id="c07-li-0124">Cryptosystems engineers, designers, and builders when attacking their own products or other systems provided to them under contract as part of systems vulnerability assessments</li>&#13;
<li id="c07-li-0125">Ethical penetration testers employed or under contract as part of penetration testing or system vulnerability assessment activities</li>&#13;
<li id="c07-li-0126">Ethical penetration testers (employed or not) participating in “bug bounty” or other controlled, limited security assessment and vulnerability testing of software, web pages, and related processes</li>&#13;
<li id="c07-li-0127">Students and teachers conducting ethical hacking and cryptanalysis as part of learning activities</li>&#13;
</ul>&#13;
<p id="c07-para-0296"><span epub:type="pagebreak" id="Page_409" role="doc-pagebreak" aria-label="409"/>The malicious attacker list would include hostile national intelligence, security, and military services; business competitors (at home or abroad) willing to commit industrial espionage; private investigators, journalists, or others willing to break the law to seek incriminating, embarrassing, or other information they can use; and the whole gamut of criminal individuals and organizations.</p>&#13;
<p id="c07-para-0297">With that in mind, let's look at a roundup of the most common assaults on cryptosystems. The details of how each attack works—and more importantly, how you can defend against them—are beyond the scope of this book and the SSCP exam. However, you will need to appreciate these typical attacks so that you can recognize when your organization may have taken actions that make such attacks likely or successful.</p>&#13;
<p id="c07-para-0298">We'll look at countermeasures across the whole spectrum of “keeping the crypto safe” so as to avoid getting too far into the technical details.</p>&#13;
<section><span id="c07-sec-0080"/>&#13;
<h3 id="head-3-178">Social Engineering for Key Discovery</h3>&#13;
<p id="c07-para-0299">Without a doubt, the most commonly used attack portfolio is the set of social engineering attack strategies and tactics. Other chapters have already introduced us to a number of these, and their use all across the phases of the cyber kill chain, from initial reconnaissance through entry and access to attack assessment. The initial reconnaissance phase can help the attacker build an organizational chart or roster for their target's human elements, from which they can identify candidates for more focused manipulation and intelligence gathering. Sometimes this can be as simple as the <i>imposter</i> strategy, where the attacker attempts (usually by phone) to get the victim to help them log onto the system in ways that disclose credentials to the attacker. (Attackers have even been known to do this in person.) Poorly secured remote access devices using poorly implemented remote access processes may make sniffing and packet capture attacks easy. If the attacker has physical access to the facility or the victim's remote work location, it can be trivially easy for them to spot the sticky notes with access information displayed upon them.</p>&#13;
<p id="c07-para-0300">More surreptitiously, an attacker pursuing an intensive all-source intelligence strategy may be able to find out many personal details regarding their victim's life, preferences, habits, activities, and interests. These can reveal information that may reduce the size of the search space for password or passphrase attacks and may even disclose information (such as one's favorite films or book characters) that are elements of additional security challenges that the victim uses frequently.</p>&#13;
<p id="c07-para-0301">The best defense against such social engineering attacks requires more effective education, training, and awareness for the organization's human users, of course; but it also requires the implementation of cryptologic methods for identity and access control that are seamlessly integrated into workflows, that are straightforward to use, and inject minimal friction into the users' day-to-day tasks. This combination of ingredients can go a long way to establishing and strengthening a <i>cybersecurity-first</i> mentality across the team.</p>&#13;
<p id="c07-para-0302">The security profession is recognizing the need to make a major change in attitudes and belief structures happen with respect to the human element in information security. For too long, too many in the industry have been blaming the victim, so to speak; they've been <span epub:type="pagebreak" id="Page_410" role="doc-pagebreak" aria-label="410"/>referring to the people in the organization as the “weakest link” in the chain of security measures. This has to change. Industries that live and die by a “safety first” mentality and mind set have long demonstrated that when everyone on the team willingly takes up the safety challenge, the workplace becomes safer. Changing the game on social engineering requires us to making a <i>cybersecurity first</i> attitude shift, throughout the organization.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0081"/>&#13;
<h3 id="head-3-179">Implementation Attacks</h3>&#13;
<p id="c07-para-0303">The programmers, systems engineers, and cryptanalysts that design and build most cryptosystems products do a fantastic job of building rock-solid, reliable systems, which are then subjected to far more extensive and stressful testing than many other systems elements before they are released into the marketplace. (This is especially true of cryptosystems that are striving to attain various government certifications.) That said, they are human, and errors in design can and will be present in these products. The humans that install and maintain them do their best to do so correctly and securely, and test these installations as well; again, errors will occur. To the attackers, this all signals “harvest time,” time to start finding ways to attack both the new cryptosystems and the updated versions of older, tried-and-true ones.</p>&#13;
<p>Quite often these <i>implementation attacks</i> focus on potential vulnerabilities in encryption algorithms themselves, such as the Kerberoasting attack on the Kerberos authentication protocol. Early versions of Kerberos made use of RC4, which has (long) since been shown to be insecure, and Kerberoasting attackers exploit this to gain access and then elevate privilege to attack other system assets.</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3">&#13;
<h3><img alt="Note" src="Images/note.png" class="left" width="76" height="53"/> Time for a Kerberoast?</h3>&#13;
<p id="c07-para-0306">Gianni Perez gives us an engaging quick look at the Kerberoasting attack, in his June 2021 short paper, published at <code><a href="https://www.academia.edu/49344324/Kerberoasting_Origins_Definition_and_Mitigation_Approaches">https://www.academia.edu/49344324/Kerberoasting_Origins_Definition_and_Mitigation_Approaches</a></code>.</p>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
</section>&#13;
<section><span id="c07-sec-0082"/>&#13;
<h3 id="head-3-180">Brute Force and Dictionary Attacks</h3>&#13;
<p id="c07-para-0307">Lexically based ciphers first taught us that given enough cryptanalysts and enough dictionaries, we could probably break any such cipher system. In essence, the attacker makes assumptions about the cryptosystem being used and about its control parameters, and then uses randomly generated plaintext to see if its encrypted results match any substring in captured ciphertext. Such “brute force” (try every possibility—there's bound to be a winner in there somewhere!) approaches are also used as password-cracking schemes. Consider the typical four-digit personal identification number used on automated teller machine (ATM) and online banking systems. Only 10,000 guesses are the most required to break into your account! Of course, we rely on our banks to notice this and shut off the card after a much smaller number. Social engineering approaches can often find information that drastically reduces that search space.</p>&#13;
<p id="c07-para-0308"><span epub:type="pagebreak" id="Page_411" role="doc-pagebreak" aria-label="411"/>Dictionary attacks often rely on precomputed tables of values, and of course, the larger the key space, the larger these tables have to become, requiring both more storage and faster storage access to be able to apply a brute force approach in a reasonable amount of time.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0083"/>&#13;
<h3 id="head-3-181">Side Channel Attacks</h3>&#13;
<p>Since every cryptosystem has to have <i>some</i> kind of hardware to run on—even it if is purely implemented in software—that hardware can be observed to see if it offers any kind of signatures that indicate something about the internals of the algorithms being used. Side channel attacks get their name because the channel the attacker is listening to is alongside the channel that the cryptosystem is <i>supposed</i> to be operating in and are limited only by the attacker's imagination. All start from the premise that computing systems show tiny variances in some kind of physical or operational signature based on the actual data being processed; if you can observe enough of these variations and correlate them to the data stream itself, perhaps you've found an exploitable weakness. Some possibilities include:</p>&#13;
<ul class="square" id="c07-list-0037">&#13;
<li id="c07-li-0128">Cache attack: Monitoring the contents and use of processor or I/O board caches or software-managed caches in virtual machine and cloud systems.</li>&#13;
<li id="c07-li-0129">Timing attack: Tightly monitoring the time each step takes.</li>&#13;
<li id="c07-li-0130">Power monitoring or power variation attack: Monitoring power usage by specific hardware elements in the cryptosystem. Many RSA implementations are vulnerable to fluctuations in electrical power.</li>&#13;
<li id="c07-li-0131">Electromagnetic attack: Measuring the tiny (sometimes not so tiny!) radio waves emitted by elements of the cryptosystem.</li>&#13;
<li id="c07-li-0132">Acoustic analysis: Measuring mechanical vibrations in system elements.</li>&#13;
<li id="c07-li-0133">Differential fault analysis: Introducing faults into your test copy of the system and seeing what that reveals.</li>&#13;
<li id="c07-li-0134">Data remanence: Well-designed cryptosystems should not leave partial or intermediate results, pad counts, etc., lying around in their innards after processing has been completed; most, however, do leave something, somewhere, which is why system zeroization is important. These partial values can be swept up in a test environment and may be revealing.</li>&#13;
<li id="c07-li-0135">Software-initiated fault attacks: By attacking other aspects of the system that hosts the cryptosystem, faults in the host environment or the cryptosystem may be triggered.</li>&#13;
<li id="c07-li-0136">Optical attacks: Passive optical attacks that work by reading the disk activity lights or the lights on your routers and modems might seem old hat, but they can work. Attackers can also physically open the hardware of a cryptosystem under test, open the microchips, and use instruments to look for stray photons emitted as the system is operating. Active attacks involve using light, lasers, or even scanning electron microscopes to interact with the cryptosystem's circuits, similar to injecting noise or test signals, to observe the results.</li>&#13;
<li id="c07-li-0137"><span epub:type="pagebreak" id="Page_412" role="doc-pagebreak" aria-label="412"/>Branch predictor attacks: Using software engineering analysis tools to predict when and how branches in the algorithm will be executed, and then using those predictions to reveal characteristics of the data being processed.</li>&#13;
</ul>&#13;
<p id="c07-para-0310">Although no one side channel attack will reveal everything, the combination of these and other possible investigative techniques could in fact lead to breaking the cryptosystem under test.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0084"/>&#13;
<h3 id="head-3-182">Numeric (Algorithm or Key) Attacks</h3>&#13;
<p id="c07-para-0311">Almost every cryptosystem depends on logical assertions that lead to concluding that “system X is unbreakable provide that conditions A, B, and C hold true.” Consider all of the algorithms that depend on very, very large prime numbers. If your system for <i>finding</i> the next three very large prime numbers has a bug in it and occasionally picks a value that is <i>not</i> prime, this can lead to an unintentional backdoor in your trapdoor function and allow attackers to crack your encryption by defeating the algorithm. (This is a front channel attack, as opposed to the side channel attack described earlier.) Much like purely random numbers that turn out not to be very random at all, <i>any</i> logical or mathematical error in the way that the cryptosystem is <i>implemented</i> can lead to incorrect operation and a possible exploitable weakness.</p>&#13;
<p>Without going into the math, some of the names you may encounter as you look at such mathematically based attacks or the weaknesses they are based on include the following:</p>&#13;
<ul class="square" id="c07-list-0038">&#13;
<li id="c07-li-0138">Small values for exponents and other control parameters in algorithms</li>&#13;
<li id="c07-li-0139">Chinese Remainder attacks: This theorem (which is named in honor of its first being described by the 3d Century CE Chinese mathematician Sun-tzu) can be applied when some parts of the control parameters can be guessed, or when too many users share same plaintext and some of the same parameters (such as <i>e</i>, but not <i>p</i>, <i>q</i>, and therefore <i>n</i>).</li>&#13;
<li id="c07-li-0140">Coppersmith's attack: A form of Chinese Remainder attack, which also can work when attacker knows part of the secret key.</li>&#13;
<li id="c07-li-0141">Broadcast attacks: The attacker sends the same plaintext or the same ciphertext to multiple recipients, collects (or intercepts) responses, and analyzes the results.</li>&#13;
<li id="c07-li-0142">Related message attack: If two ciphertext messages differ in part in some known or understandable ways, other analysis may reveal more about the keys or control parameters in use.</li>&#13;
<li id="c07-li-0143">Short padding attacks: Most cryptosystems have to deal with padding out variable-length message content so that the encryption and decryption algorithms can work on expected block sizes. Incorrect or short padding can open an exploitable weakness.</li>&#13;
<li id="c07-li-0144">Algorithmic weaknesses: Some algorithms are just not as logically or mathematically strong as they claim to be (think about DES).</li>&#13;
<li id="c07-li-0145">Usage weaknesses: Patterns of use that reveal information about algorithms, keys, or content.</li>&#13;
<li id="c07-li-0146"><span epub:type="pagebreak" id="Page_413" role="doc-pagebreak" aria-label="413"/>Faulty prime numbers in key generation: Values that actually aren't prime, or two primes that aren't far enough apart (on the number line) to meet strong encryption needs.</li>&#13;
<li id="c07-li-0147">Pseudorandom number weaknesses: Too small, or not random enough (can predict their generator's output sequence).</li>&#13;
<li id="c07-li-0148">Anticipated or predicted plaintext can also be useful in such attacks, as well as using a related message attack, in which two ciphertexts thought to be very similar can be compared and analyzed to possibly reveal weaknesses in the cryptosystem.</li>&#13;
<li id="c07-li-0149">And many more.</li>&#13;
</ul>&#13;
</section>&#13;
<section><span id="c07-sec-0085"/>&#13;
<h3 id="head-3-183">Traffic Analysis, “Op Intel,” and Social Engineering Attacks</h3>&#13;
<p id="c07-para-0313">We'll group these three attack vectors into one group, not because they use similar analytical attack processes, but because they often exploit the human frailties in our organizations and the ways we put cryptographic systems to work. They are useful as part of an attacker's ongoing reconnaissance efforts, and as such they can quite often break the protection that cryptosystems were supposed to provide.</p>&#13;
<p id="c07-para-0314"><i>Operational intelligence</i> is the gathering of information and insight by watching how your organization operates, at the fine-grained, step-by-step process or task level, and looking for patterns. Observing that a Coast Guard unit often places phone orders for dozens of pizzas or other meals to be delivered might, for example, be a tip-off that a cutter is about to launch to do an intercept of a suspect vessel at sea. <i>Traffic analysis</i> looks at how communications ebb and flow across the organization, even if the content is encrypted; changes in these patterns can often be reliable predictors of changes in behavior. <i>Social engineering</i> encompasses almost any effort to learn about the people in the organization and find exploitable weaknesses via those people. Sadly, the greatest human strength we have—that we are “herd animals” and we live best by helping others in our “herd”—is the most exploitable social engineering weakness that we have. Think of the total of these intelligence and reconnaissance processes as reverse-engineering how your organization gets its work done, finding exploitable vulnerabilities along the way. If this all sounds like what <i>you</i> should have been doing during the vulnerability analysis phase yourself, you'd be right!</p>&#13;
<p id="c07-para-0315">We'd like to think that we've come a long way since the days when journalists could construct an organizational map of the Central Intelligence Agency headquarters by starting with the phone number listed in the public phone records, and just <i>war dial</i> numbers around that, asking each person who answered who they were and what office they were in. The infamous “I'm from IT, could you let me log on as you?” trick is still used for one reason only: <i>because it works</i>. So-called <i>dumpster diving</i>, going through the trash thrown out by a target organization, is still quite revealing (if a bit messy). This is especially useful when planning algorithmic attacks that need fragments of ciphertext, expired keying material, user or maintenance documentation (about the cryptosystems or other systems and processes), <span epub:type="pagebreak" id="Page_414" role="doc-pagebreak" aria-label="414"/>customer and subscriber information, or even equipment declared surplus and sent to the salvage yard or the dumpster.</p>&#13;
<p id="c07-para-0316">In nearly all cases, these traditional espionage techniques still work because people and organizations tend to take shortcuts, make mistakes, or make incorrect assumptions. We cannot overemphasize this point! Product and systems implementations get rushed, because the deadlines are important; design assumptions can be inadequately tested or validated; and risk assessments can and are often curtailed or done only in a summary fashion.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0086"/>&#13;
<h3 id="head-3-184">Massively Parallel Systems Attacks</h3>&#13;
<p id="c07-para-0317">In many, if not all, cryptographic systems, we assume that attackers will find it computationally infeasible to successfully apply brute force, pattern matching, or many other numerical or number theory–based attack approaches. This assumption about what is feasible—whether it is affordable or even doable—is part of that race against time we talked about earlier. Consider the the arguments over key length when DES was being created and competed, and how AES has had to push to even longer keys, as just one indicator. National security and intelligence services have long been one of the biggest drivers on the supercomputer and massively parallel computing market (and the ones with the deepest pockets to pay for such systems, typically), so we already have many examples of using such systems to break encryption schemes. (This is nothing new; if you think about it, the Bombe that Alan Turing and his team built for the British during World War II was far more expensive, physically larger, and demanded a larger team of talented brainpower than the cryptosystem they were trying to defeat. Compared to Enigma, the Bombe was a supercomputer of its day.)</p>&#13;
<p id="c07-para-0318">Massively parallel architectures are also readily available to the rest of us, especially if we have a bit of money to invest. As the Stone Soupercomputer project at Oak Ridge National Laboratories demonstrated, clever engineering can take most any set of computers and mesh them together to solve complex numerical problems on the cheap. Academics (even high schools) learned from this example, as did the hacking community. And of course, we've seen that massive zombie botnets can easily be organized and used to conduct distributed denial of services attacks. If it hasn't happened already, the time when a massive zombie botnet figures prominently in an attack on a cryptographic system, its algorithms, or its keys is not very far away.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0087"/>&#13;
<h3 id="head-3-185">Supply Chain Vulnerabilities</h3>&#13;
<p id="c07-para-0319">The cyberattacks of 2021 have heightened awareness of attacks on “the supply chain,” but in reality, there is no one supply chain (like there is one Internet). Two attacks, the ones involving Colonial Pipeline and JBS S.A., demonstrate this. Each of these companies operate a physical supply chain that collects and processes materials from their suppliers, ships these across long distances, and forwards them on to wholesale and retail customers. They also operate IT and OT systems to operate and manage this physical supply chain. Their physical supply chain itself, and their IT and OT systems, are supported by supply chains <span epub:type="pagebreak" id="Page_415" role="doc-pagebreak" aria-label="415"/>for parts, software, firmware, and data. Prior to this, the SUNBURST and HAFNIUM attacks, demonstrated what happens when attackers can infiltrate the software supply chain, causing malware payloads to be pushed to unsuspecting targets as a part of a software update from a (presumably) trustworthy supplier.</p>&#13;
<p id="c07-para-0320">As you saw when we looked at hierarchies of trust, virtually every element of our IT and OT systems comes from some supplier, who got it from some manufacturer, who built it out of parts and subsystems built by other companies, and so on. Every element of that value chain is a potential point of vulnerability, a place where otherwise trustworthy designs can have backdoors inserted or key parameters tweaked to create a weakness. Intelligence services have long been adept at surreptitiously modifying equipment, and later software, while it was en route to a target that they wished to gain insider access to or manipulate in some fashion.</p>&#13;
<p id="c07-para-0321">The dangers of an inadequately protected supply chain are not just limited to surreptitious manipulation (legal or otherwise) by outsiders. Many of the attacks against cryptosystems exploit errors in design and use, and one such logical error is if too many devices in too many client or server systems are using the same prime numbers. As a systems administrator, you usually can replace the default administrator username and password, but on most commodity devices like modems, switches, routers, firewalls, VPN systems, or even printers, projectors, and VOIP systems, you'll have a hard time getting at the key parameters that dictate how those devices initiate and perform as elements in your cryptographically protected systems.</p>&#13;
<p id="c07-para-0322">Does that sound farfetched? In 2013, four researchers documented just how prevalent this “common prime use” is in the IT industry, finding that the same common prime numbers were integral to devices from over 30 manufacturers. Since then, one of this team, Nadia Heninger, has been quite outspoken about how national security services don't have to break everybody's codes to read everybody's information as a result of this supply chain weakness.</p>&#13;
<p id="c07-para-0323">Supply chain weaknesses in IT security and cryptography are at risk of being exploited against us, whether by criminals, terrorists, foreign governments, or our own governments. A closer read of the reporting on the Edward Snowden information leaks, back in 2013, reveals that NSA had not only actively been soliciting the cooperation of information systems technology and services providers to build its Total Information Awareness system; it also shows how successful other governments had been at exploiting known supply side vulnerabilities.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0088"/>&#13;
<h3 id="head-3-186">The “Sprinkle a Little Crypto Dust on It” Fallacy</h3>&#13;
<p id="c07-para-0324">The last vulnerability we'll mention is more of a mental failure than a systems or technology vulnerability. Far too many people—experts and neophytes alike—think that the obvious answer to our information security needs is just to <i>encrypt</i> everything in sight—and most things that are not in sight. We cannot blame people for thinking this way when we readily acknowledge the need for security for data in motion, in use, and at rest.</p>&#13;
<p id="c07-para-0325">The bad news is that some software development management methodologies seem to promote sloppy software development and testing, particularly when the priority is placed <span epub:type="pagebreak" id="Page_416" role="doc-pagebreak" aria-label="416"/>on meeting user needs on time regardless of any possible errors in the implementation of that software. It is in such environments that we sometimes see simple encryption processes (perhaps overly simple!), downloaded from someplace on the Web, incorporated into systems with little end-to-end consideration of what the real security needs are and the steps necessary to achieve them.</p>&#13;
<p id="c07-para-0326">The good news is that there are well-established, well-understood, and proven methodologies for developing software in ways that earn high assurance that the software does what it needs to, and nothing else, and that includes keeping data properly secure at all times. Good software design frameworks that encourage secure code development, such as the Open Web Application Security Project (OWASP), are a great place to start, but without the end-to-end commitment and support of the development <i>management</i> team, frameworks are not enough.</p>&#13;
<p id="c07-para-0327">It takes dedication, forethought, time, and effort to apply sound systems engineering and software engineering methods up front; it's not free to “bake in” the safe and secure computing we need up front as we build our systems, applications, services, or even Internet of Things (IoT) products and gadgets. Much like any kind of product quality approach, too many businesses seem to believe that there's never enough money or time to do it right the first time, and the ones that usually decide this hope to have moved on to other pastures when someone else has to spend the time and money to do it over again, hopefully better.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0089"/>&#13;
<h3 id="head-3-187">Countermeasures</h3>&#13;
<p id="c07-para-0328">Many of these countermeasures are steps you should be taking to support other risk mitigation problems, so perhaps they offer as a side benefit the ability to limit attacks on your cryptosystems. It is useful at this point to group them into physical, logical, and administrative sets of countermeasures. Remember that your organization's risk management profile should be dictating which sorts of threats you need to detect, which can merely be deterred, and which you have to prevent or constrain; let this drive how you choose to protect your protective systems themselves, such as your cryptographic systems.</p>&#13;
<section><span id="c07-sec-0090"/>&#13;
<h4 id="head-4-80">Physical Countermeasures</h4>&#13;
<p id="c07-para-0329">The physical security of your IT systems is the place to start. To the best degree possible, seek to restrict physical access to your Internet service provider's (ISP's) point of presence, your communications interfaces (such as modems and routers), and any other on-premises servers and systems. In doing so, your main concern is to prevent unauthorized modifications to hardware, firmware, and control settings; you also want to restrict as much as possible the ability of a stranger to attach a device anywhere on your system, such as a network sniffer or tap.</p>&#13;
<p id="c07-para-0330">You may also want to inspect all electrical power connections to ensure that no power line–monitoring taps have been surreptitiously added. Uninterruptible power supplies and power conditioning equipment can protect your cryptographic systems from natural and man-made undervoltage, overvoltage, noise, or other power line–injected signals.</p>&#13;
<p id="c07-para-0331"><span epub:type="pagebreak" id="Page_417" role="doc-pagebreak" aria-label="417"/>Systems configuration management information should also be physically protected. Keep such documentation, log analysis reports, and so forth in a locked container, and restrict access to this information to people with the right need to know.</p>&#13;
<p id="c07-para-0332">The cryptographic elements of end-user systems, servers, and communications systems may need to be periodically zeroized or reset so that any potential leaks or data remanence can be reduced or eliminated. For most small office situations that do not have dedicated cryptologic systems, this can usually be accomplished by a thorough cold boot of systems—but be careful, as many systems have “fast boot” capabilities that actually restart the system from the way it was when it was last shut down. This can lead to data remaining in the system in a variety of ways. (Although you might think of clearing the memory as a logical operation, it usually does take a physical action to accomplish it—even if that's a manually invoked power-on reset.)</p>&#13;
<p id="c07-para-0333">Disposal of systems components, documentation, log files, and all other information assets will ultimately lead to some physical item (such as a disk, a document, or a system) being thrown away. Your information classification guide, which you should have developed during your risk assessments, should guide you in determining which assets need destructive zeroization or clobbering and which can be safely disposed (possibly for salvage value).</p>&#13;
</section>&#13;
<section><span id="c07-sec-0091"/>&#13;
<h4 id="head-4-81">Logical Countermeasures</h4>&#13;
<p>Assuming you've done a thorough vulnerabilities assessment and already addressed the most compelling of the common vulnerabilities your systems were exposing, dealing with the logical threats to your cryptographic systems mainly involves three sets of actions—key and parameter management, certificate management, and enforcement of user-level requirements:</p>&#13;
<ul class="square" id="c07-list-0039">&#13;
<li id="c07-li-0150">Management of cryptographic keys, seeds, control parameters, etc., should reflect the strongest level of protection that fits within any runtime performance constraints or targets your organization has established. Establish procedures that control how you decide to make changes, as well as how you control and audit that changes are made correctly.</li>&#13;
<li id="c07-li-0151">Your organization may provide its own local CA and issue end-user certificates to individuals or work units, or it may rely on the public key infrastructure completely and the CAs built into the browsers and other systems elements you're using. Either way, you'll need policies and procedures for handling certificate issuance and expiration, and quite possibly want to use software-enforced policies that control how end users can override any certificate validation issues they encounter.</li>&#13;
<li id="c07-li-0152">Your organization will no doubt write administrative policies that dictate acceptable use, control data exfiltration, and specify user privileges, auditing, and access control, just to name a few. Many of these require that users follow the policies' instructions and properly use protected systems, some of which involve use of cryptographically protected systems elements. You can use software-defined policies or other logical controls to help enforce these protections.</li>&#13;
</ul>&#13;
</section>&#13;
<section><span id="c07-sec-0092"/>&#13;
<h4 id="head-4-82">Administrative Countermeasures</h4>&#13;
<p id="c07-para-0335"><span epub:type="pagebreak" id="Page_418" role="doc-pagebreak" aria-label="418"/>We cannot overemphasize that the number one, most important administrative countermeasure is configuration management and control. With a well-established, documented systems security baseline in your hands, you can quickly determine that a small office, home office (SOHO)-quality Wi-Fi router at the edge of your campus has had its firmware hacked by somebody; you can also verify that despite the lock on the wiring closet door being securely locked, someone has been in there playing around with your infrastructure!</p>&#13;
<p id="c07-para-0336">The next most important administrative countermeasure is getting your people trained, motivated, and on side with your team. Initial and follow-on training, education, and motivation are imperative to transforming your people risk, yet doing so in ways that keep them customer-focused and engaged, and helpful to the degree their jobs and your team need. Having everyone on the staff know that modern IT systems use all sorts of cryptographic techniques to enforce access control, for example, can be a great way to build trust and confidence; most of your workforce, however, probably has no need to know how you manage certificates or keys.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0093"/>&#13;
<h4 id="head-4-83">Timing Is Everything</h4>&#13;
<p id="c07-para-0337">One final set of countermeasures remains in your organization's hands: frequent change. You control when passwords must be updated, when caches must be flushed, and when keys must be reset or certificates revalidated or reissued. You control how often (or on what irregular basis) you attempt partial or complete vulnerability assessments, including penetration testing.</p>&#13;
<p id="c07-para-0338">Classical encryption failed as often as it did because it could easily become <i>predictable</i>. Predicable patterns can drastically reduce the search space in which attackers have to hunt, poke, or attempt to break your encryption; patterns help traffic analysis find <i>more</i> data and <i>more</i> patterns.</p>&#13;
<p id="c07-para-0339">Be surprise tolerant. Go beyond expecting the unexpected, and try to think ahead of your own business processes. Mix things up; change your rhythms; alter your operational signature.</p>&#13;
</section>&#13;
</section>&#13;
</section>&#13;
<section aria-labelledby="head-2-133"><span id="c07-sec-0094"/>&#13;
<h2 id="head-2-133">PKI and Trust: A Recap</h2>&#13;
<p>We've looked in some depth at the different parts of the public key infrastructure; let's put them all into a (hopefully!) simpler perspective.</p>&#13;
<ul class="square" id="c07-list-0040">&#13;
<li id="c07-li-0153">Key exchange processes, such as Diffie-Hellman-Merkle, provide both the architecture and the protocol framework for co-generation of session keys used by two parties to establish secure communications with each other.</li>&#13;
<li id="c07-li-0154">Session keys are then used with symmetric encryption algorithms, such as DES or AES, to provide fast, efficient, and secure communication during the session that they apply to.</li>&#13;
<li id="c07-li-0155"><span epub:type="pagebreak" id="Page_419" role="doc-pagebreak" aria-label="419"/>Asymmetric encryption algorithms using trapdoor functions, such as RSA or ElGamal, provide the foundation for generating public and private keys for parties to use in key exchange processes.</li>&#13;
<li id="c07-li-0156">Digital certificates provide digitally signed ways to assert that a given entity's identity and public key are in fact associated (bound) with each other. These certificates can be issued by any node on the Internet or within a system.</li>&#13;
<li id="c07-li-0157">Digital signatures provide highly secure, reliable ways to authenticate that software components (such as encryption suites) and certificates are authentic—that is, that they are in fact issued by the entity that they came from.</li>&#13;
<li id="c07-li-0158">Hierarchies of trust provide a certificate authority (CA) as the source of a top-level assertion of trustworthiness; the CA issues certificates regarding specific parties (and their identity and corresponding public keys) and can delegate certificate issuing authority downward to intermediate nodes. This provides a self-scaling architecture for conferring trust via certificates.</li>&#13;
<li id="c07-li-0159">Endpoint devices use encryption suites to participate in key exchange, enjoy secure communications, and authenticate software, data files, or other components via digital signatures from their originators or providers.</li>&#13;
</ul>&#13;
<p id="c07-para-0341"><a href="#c07-fig-0007" id="R_c07-fig-0007">Figure 7.7</a> summarizes the families of cryptographic algorithms by types, mathematical algorithms, and use. It also gives a quick roundup of the various protocols used in the public key infrastructure and in key management in general. As an SSCP, you're going to need to be on a first-name basis with most if not all of the items shown on this “family tree”—if not for the SSCP exam itself, then certainly out on the job.</p>&#13;
<figure> <img alt="Schematic illustration of Crypto family tree" src="Images/c07f007.png" class="center" width="1538" height="794"/>&#13;
<figcaption>&#13;
<p><span class="figureLabel"><a href="#R_c07-fig-0007" id="c07-fig-0007" role="doc-backlink">FIGURE 7.7</a></span> Crypto family tree</p>&#13;
</figcaption>&#13;
</figure>&#13;
<p id="c07-para-0342"><span epub:type="pagebreak" id="Page_420" role="doc-pagebreak" aria-label="420"/>At this point, it's worth considering hierarchies of trust from the end <i>user's</i> perspective. Stop for a moment and think about what goes through your mind when you follow a URL to a website you've never visited before. How do you decide just how far you can trust that site's owners and operators? Don Norman and Jakob Nielsen, at NN/g, built on Maslow's Hierarchy of Needs to see this as a journey you go on as you pass from having no trust at all to a willingness to commit to an ongoing, valuable relationship (in whatever domain of activity you are pursuing with that website's owners and operators). At each step of the relationship-building process, they argue, there's the potential that the website's designers (and the business logic it embodies) assume that users are already at higher levels of trust than individual users may actually see themselves as being at. This misalignment of expectations about trust may in fact lead to lost opportunities!</p>&#13;
<p id="c07-para-0343">Certainly, secure software and systems design, implemented with the right set of secure protocols, play a major part in building trust with end users; PKI, for example, <i>manages the trust relationship</i> across that user-to-systems interface.</p>&#13;
<p id="c07-para-0344">What else can (and should) be considered to help manage and maintain that trust?</p>&#13;
</section>&#13;
<section aria-labelledby="head-2-134"><span id="c07-sec-0095"/>&#13;
<h2 id="head-2-134">On the Near Horizon</h2>&#13;
<p id="c07-para-0345">As computing power, storage capabilities, and network throughput continue to increase dramatically, while the costs of using them keeps plummeting, no doubt more and more massively parallel computing attacks on cryptographic systems will find more vulnerabilities to exploit. Other changes in the technology of computing are here or on the near horizon; what might they hold for the future? We'll look at some of these issues through the lens of the cryptosystems user or designer right now, and save a peek at larger issues for <a href="c12.xhtml">Chapter 12</a>, “Cross-Domain Challenges,” as we wrap up everything.</p>&#13;
<section><span id="c07-sec-0096"/>&#13;
<h3 id="head-3-188">Pervasive and Homomorphic Encryption</h3>&#13;
<p id="c07-para-0346">Securing data at rest, in motion, and in use provides an exceptional set of challenges to systems designers. Two distinctly different approaches to this problem address the in use aspect by asking whether the data actually must be decrypted—presented to users in plaintext form—in order to be put to use.</p>&#13;
<p id="c07-para-0347"><i>Pervasive encryption</i>, as IBM calls it, is one approach that tries to keep sensitive information always encrypted, even when it is being used or displayed. This may dictate extensive changes to information systems architectures, from central systems to end-user devices, as well as changes to the ways we use our systems and information. Pervasive encryption may not be the right, or most cost-effective, answer for each need.</p>&#13;
<p id="c07-para-0348"><i>Homomorphic encryption</i> demonstrates that with the right choice of encryption algorithms, complex data analytics can be performed on many individually encrypted data items to produce a meaningful, aggregate answer—without needing to decrypt any of the input data and without revealing its plaintext or exposing it to attack. (Homomorphic means that things have similar forms but different structures; set theory uses it to describe how the <span epub:type="pagebreak" id="Page_421" role="doc-pagebreak" aria-label="421"/>results of performing operations on elements of one set are mapped to the results of applying the corresponding operations to associated members, or images, in a second set. This does not necessarily mean that the reverse mapping can be done.) Individual patient medical data, for example, might be stored in individually encrypted records within many different clinics and care provider applications platforms; if all of these platforms were hosted in the cloud, a different application could access all of that data and draw inferences and conclusions about it without revealing PII or individual patient medical information. This could provide a near-real-time health alert system, detecting the possible outbreak of contagious diseases or spotting a possible toxic exposure event, much earlier than is currently possible. (ElGamal encryption is well suited to use in such homomorphic encryption applications.)</p>&#13;
</section>&#13;
<section><span id="c07-sec-0097"/>&#13;
<h3 id="head-3-189">Quantum Cryptography and Post–Quantum Cryptography</h3>&#13;
<p id="c07-para-0349">Over the last 10–15 years, quantum computing and quantum cryptography have continued to move out of the theoretical literature and into various technology demonstrator systems. It's quite likely that the next 10 years will see more and more demonstrators become market-worthy technologies. As an SSCP, you won't be expected to know the physics and the math that make them the unique, new approaches that they are, but you will no doubt need to become more and more familiar with them over time.</p>&#13;
<p id="c07-para-0350">In the physical sciences, a <i>quantum</i> is the smallest unit of something that can exist. The ancient Greeks thought that this indivisible bit of matter was the atom, but over the last 200-plus years, we've continued to split the atom and its subatomic parts into finer and finer pieces. <i>Quantum mechanics</i>, the study of the behavior of the individual quanta of matter, has some very strange effects associated with it. One of these is that whenever you try to measure something about a quantum, the act of measuring interferes with it and changes the state of that quantum. The other is that when you prepare two (or more) quanta in a particular way, their states (their spin direction and orientation, for example) can become entangled, which means that if you physically separate them and force one to change, the other entangled quantum immediately changes state to match. This entanglement phenomenon has sometimes been called “spooky action at a distance.”</p>&#13;
<aside>&#13;
<div class="top hr"><hr/></div>&#13;
<section class="feature3"><span id="c07-fea-0015"/>&#13;
<h3 id="head-2-135">Schrödinger's Cat</h3>&#13;
<section><span id="c07-sec-0098"/>&#13;
<p id="c07-para-0351">Perhaps the most well-known example of a thought experiment in quantum physics was posed by Erwin Schrödinger in 1935. Suppose we have a system that consists of a cat in a box; in the box is a glass bottle of a toxic gas, a small sample of a radioactive isotope, and a mechanism that will cause a hammer to smash the bottle when a single atom of the isotope decays. The problem, he asked, is how do you describe the system at a particular time <i>t</i>? In classical physics, we'd say that at time <i>t</i>, the cat is either alive (the atom hasn't decayed) or it is dead, but since we can only estimate the probability of one atom decaying by that time, we really don't know until we open the box and look inside (preferably while wearing a gas mask).</p>&#13;
<p id="c07-para-0352"><span epub:type="pagebreak" id="Page_422" role="doc-pagebreak" aria-label="422"/>Quantum mechanics, on the other hand, describes the system as the superposition of two states: one in which the atom has decayed and the cat has died, the other in which the atom has not decayed and the cat still lives. Until, of course, you open the lid and look; this causes the superposition to collapse, and the cat is either alive or dead but not both.</p>&#13;
<p id="c07-para-0353">If that makes sense to you, there's a fortune to be made just waiting for you in quantum computing…</p>&#13;
</section>&#13;
<div class="bottom hr"><hr/></div>&#13;
</section>&#13;
</aside>&#13;
<section><span id="c07-sec-0099"/>&#13;
<h4 id="head-4-84">Quantum Computers as Part of Cryptographic Systems</h4>&#13;
<p id="c07-para-0354"><i>Quantum key distribution (QKD)</i> systems can make use of the measurement effect to alert users that a third party has attempted to observe a key. This makes it ideal for one-time pad encryption systems, and in fact, it can work quite well with AES and other symmetric encryption systems as a result. QKD requires special protocols, two of which are the BB84 (developed by Charles Bennett and Gilles Brassard in 1984) and the E91 (developed by Artur Eckert in 1991). As of this writing, six different quantum key distribution networks were in operation, largely as test and demonstration systems. Photons (elemental particles of light) traveling in fiber-optic systems have been used to date, although the People's Republic of China has flown (in 2017) at least one spacecraft payload using laser links to connect ground stations in China and Austria in the first globe-spanning QKD network. Since the very act of attempting to sniff such a quantum key packet changes the value of the key, the potential here is profound.</p>&#13;
</section>&#13;
<section><span id="c07-sec-0100"/>&#13;
<h4 id="head-4-85">Quantum Computers as Part of Cryptanalysis Attacks</h4>&#13;
<p id="c07-para-0355"><i>Quantum computing</i> does not use binary digits (or bits) as we're familiar with, which store either a 0 or a 1. Every bit in a computer is in one of those two states, not both—and that bit cannot be in an undefined state, either! A <i>qubit</i>, or quantum bit, by contrast, exists in both the 0 and 1 states simultaneously until you observe it; then, it is said to <i>collapse</i> to a specific value. Without going into more detail, suffice to say that quantum computers can probably help us compute probabilistic problems far more efficiently than binary digital computers can. This could mean that a powerful quantum computer could be more effective at traditional attacks on known encryption algorithms. Mathematician Peter Shor published an algorithm in 1994 that could conceivably crack RSA's integer factorization problem once we can build a workable quantum computer (probably one measuring in mega-qubits or giga-qubits in capacity, and hundreds of millions or billions of qu-flops, or quantum floating-point math operations per second). While such machines are still far over the horizon, the argument rages on in the blogospheres. Watch those spaces!</p>&#13;
</section>&#13;
</section>&#13;
<section><span id="c07-sec-0101"/>&#13;
<h3 id="head-3-190">AI, Machine Learning, and Cryptography</h3>&#13;
<p id="c07-para-0356"><i>Artificial intelligence (AI)</i> is the name given to a broad set of approaches that try to make computer systems that can reason, think, solve problems, or interact with people and with each other in the same ways that healthy, rational humans do. The most <span epub:type="pagebreak" id="Page_423" role="doc-pagebreak" aria-label="423"/>familiar example of this might be natural language translation, such as that provided as a Web-based service by Google Translate. As a <i>machine learning</i> system, Google Translate uses a vast array of processing elements (software- and hardware-based), which form a web or mesh; that mesh looks at huge databases of phrases in the source language and, based on past experience, computes the probability that what you want is a particular phrase in the target language. If you agree with that translation, Google Translate increases the probably correct score for that pair of source and target phrases—but it still “knows” nothing about what those phrases mean to humans! (In Peter Watt's science fiction novel <i>Blindsight</i>, he shows this <i>Chinese Room</i> translation system and the misunderstandings it can lead to, to dramatic effect!) Machine learning is done by taking such a mesh of processing elements and training it with very large sets of data—in the case of machine language translation, some of those sets would be “correct translations,” some might be “totally wrong,” and others might be “technically correct but socially ill advised,” at least <i>statistically</i>, that is. Each node in the mesh calculates coefficients as a result of both training and operational use. The problem with machine learning, as with many such analytics approaches, is that we humans can see that it works—it gets good answers—but we cannot explain why!</p>&#13;
<p id="c07-para-0357">Cryptanalysts might make good use of machine learning approaches, especially if they have very large datasets of ciphertext to work with and some good starting points or <i>cribs</i> to work from. Machine learning is already being used in traffic analysis and pattern recognition as a way to infer meaning from encrypted traffic, even traffic routed through VPNs.</p>&#13;
</section>&#13;
</section>&#13;
<section aria-labelledby="head-2-136"><span id="c07-sec-0102"/>&#13;
<h2 id="head-2-136">Summary</h2>&#13;
<p id="c07-para-0358">We've taken as non-mathematical a look at cryptography as we can in order to gain a better understanding of what it can do (and what it cannot do!) to help us keep our organization's information and information systems safe and secure. The last three-plus decades have been nothing short of revolutionary, for they've seen cryptographic systems become commonplace—even your smart watch or fitness tracker uses cryptography to keep it paired with <i>your</i> devices, rather than someone else's.</p>&#13;
<p id="c07-para-0359">At the heart of this revolution is the widespread adoption and use of public key encryption, which gave rise to digital certificates, digital signatures, and a host of other cryptosystems and uses. These have gone a long way to addressing many of the shortfalls in meeting CIANA's needs that previous generations of cryptography, networking, and systems could not fully address. We've seen how hierarchies of trust have been developed that enable and empower the vast majority of online users to conduct personal matters, business transactions, and financial transactions with reasonable assurance of safety. Nonrepudiation in the Internet world has become much more commonplace, largely as a result of this public key infrastructure. That said, PKI, certificates, and even the webs of trust we see in alternatives like PGP and GPG are not perfect solutions to all of our needs.</p>&#13;
<p id="c07-para-0360"><span epub:type="pagebreak" id="Page_424" role="doc-pagebreak" aria-label="424"/>Since its first uses over 3,500 years ago, cryptography has protected one set of secrets with another—we protect the information we must keep safe and secure by means of algorithms, systems designs, and ultimately with cryptographic keys. The algorithms and the designs have been made public, and the millions of peer review pairs of eyes that subject them to constant scrutiny are part of the networks of trust we all depend on largely without thinking about them.</p>&#13;
<p id="c07-para-0361">Although usually not cryptographers, cryptanalysts, or cryptographic engineers by training or inclination, most SSCPs do need to have a strong working knowledge of how to use cryptography, as well as have a healthy skepticism about being overly reliant on it. Cryptography is a vital element of almost every aspect of identity management, access control, and secure communications. As the market seeks to expand information protection to pervasively assure data in motion, data at rest, and data at use, more and more opportunities for smartly applied cryptography will no doubt arise; therein will the SSCP find even further professional opportunity.</p>&#13;
</section>&#13;
<section aria-labelledby="head-2-137"><span id="c07-sec-0103"/>&#13;
<h2 id="head-2-137">Exam Essentials</h2>&#13;
<ul class="none" id="c07-list-0041">&#13;
<li id="c07-li-0160"><b>Explain the fundamental concepts of cryptography and how they are used.</b>  Cryptography is the process of obscuring or hiding the meaning of information so that unauthorized persons or processes cannot read it or make a useful copy of it. The original information is called plaintext (no matter what form of data it is), which is encrypted to produce ciphertext, which can be transmitted to a recipient or stored for later retrieval. Upon receipt or retrieval, the ciphertext is decrypted to recover the original meaning and the original form of the plaintext. The encryption and decryption processes (or algorithms) require keys; without the keys, no encryption or decryption can occur. Symmetric encryption uses the same key (or a simple transform of it) for encryption and decryption, whereas asymmetric encryption uses different keys that are nearly impossible to derive from each other.&#13;
<p id="c07-para-0364" class="listPara1"><b>Differentiate between hashing and encryption.</b>  Hashing is a one-way encryption process: plaintext goes in, a hash value comes out, but you cannot reverse this to “un-hash” a hash value to get back to the original plaintext. Hashing takes a plaintext message and uses an encrypting hash algorithm to transform the plaintext into a smaller, shorter value (called the hash or hash value), which must be unique to the input plaintext. The hash algorithm should make it impossible to decrypt the hash value back into the plaintext, without any way to determine the meaning of a particular hash value. By contrast, the purpose of non-hashing encryption is to safely store or communicate plaintext with its meaning hidden for storage and transmission so that the meaning can later be derived by means of the right decryption algorithm and key. Encryption for storage and communication is thus part of a two-way process.</p>&#13;
<p id="c07-para-0365" class="listPara1"><b>Explain the basic hashing algorithms and the role of salting in hashing.</b>  Hashing algorithms treat all input plaintext as if it is a series of numbers and use techniques such as modulo arithmetic to transform potentially large, variable-length inputs into fixed-length <span epub:type="pagebreak" id="Page_425" role="doc-pagebreak" aria-label="425"/>hash values. When the function is chosen correctly, the change of a single bit in the input will produce a significantly different hash value. This provides a fast way to demonstrate that two sets of input (two files, for example) are either bit-for-bit identical or they are not. It should not be possible to take a hash value and reverse-calculate what the input plaintext was that produced it. To improve the strength of a hash function, a large random number is added to the input plaintext as additional bytes of input. This makes it much harder for brute force attacks to attempt to break a hash value back to its original plaintext.</p>&#13;
<p id="c07-para-0366" class="listPara1"><b>Know how to use cryptography to provide nonrepudiation.</b>  Digitally signing documents, files, or emails makes it exceptionally difficult for a sender to claim that the file the recipient has is not the file that they sent or to deny sending it at all. Using digital signatures to prove receipt and use of files by the addressee or recipient, however, requires some form of digitally signed receipt process, which most email systems cannot support. However, add-on systems for email do provide this, and EU standards have been supporting their adoption and use as part of secure e-commerce. Some national postal systems and a growing number of Internet service providers now make such capabilities available to users.</p>&#13;
<p id="c07-para-0367" class="listPara1"><b>Explain how cryptography is used to support digital signatures and what benefits you gain from using digital signatures.</b>  Asymmetric keys provide a way to digitally sign a file, an email, or a document. Typically this involves calculating a cryptographic hash of the input file, and combining it with the originator's private key via a decryption process; the result is called the sender's digital signature of that file or document. Recipients use the matching encryption process on that digital signature, using the sender's public signature, to produce a received hash value, while also locally computing a hash of the received file. If these match, then the sender's identity has been validated. Digitally signing files assures recipients that software updates, transaction files, or important documents have not been altered in storage or transmission. This provides enhanced data integrity and nonrepudiation and can do so across space (sender to recipient) and across time (validating that files placed in storage have not been corrupted between the time they were created and the time they are retrieved for use, be that milliseconds or months).</p>&#13;
<p id="c07-para-0368" class="listPara1"><b>Explain what key management is, what different approaches can be used, and the issues with key management.</b>  Key management is the process of creating encryption and decryption keys and then issuing, distributing, or sending them to users of the cryptographic system in question. The cryptographic keys are the fundamental secret that must be protected—all else, from systems design and usage through its fundamental algorithms, is known or will be easily known by one's adversaries. Keys must be distributed in ways that prevent loss or disclosure, and they need to be destroyed or zeroized if users leave the network, if keys are partially compromised, or as a routine security measure. Keys can be distributed as physical documents or in electronic message format; both are subject to compromise, corruption, and loss, and typically such key systems (if based on symmetric algorithms) cannot self-authenticate a sender or recipient. Public key infrastructures do not actually distribute keys; rather, they provide for sender and recipient to co-generate a unique, private session key, which is used only for that session's communication; these require asymmetric (public and private) keys have been generated for each user, typically authenticated by certificates.</p>&#13;
<p id="c07-para-0369" class="listPara1"><span epub:type="pagebreak" id="Page_426" role="doc-pagebreak" aria-label="426"/><b>Compare and contrast key management with cryptographic asset management.</b>  Key management focuses on the distribution and use of cryptographic keys, cryptovariables and other information related to their use. It includes proper, secure storage, management of expiration and renewal, revocation, and destruction. Cryptographic asset management expands this to include digital certificates, public and private keys (both for individual users, endpoints, and for other organizational users), as well as session keys used for archival storage and other purposes.</p>&#13;
<p id="c07-para-0370" class="listPara1"><b>Explain how public key infrastructures (PKIs) are used.</b>  Public key infrastructures provide two important benefits. First, by providing a secure means to generate, distribute, authenticate, and use public and private encryption keys, PKI has made widespread use of cryptographic protection a fundamental part of business, personal, and government use of the Web and the Internet. Second, by providing a scalable, decentralized capability to digitally sign documents, files, email, or other content, PKI provides not only enhanced confidentiality and integrity of information, but also nonrepudiation protection. It also strengthens authentication mechanisms. The total is that it makes secure, reliable information more available when it is needed, where it is needed.</p>&#13;
<p id="c07-para-0371" class="listPara1"><b>Explain the important differences between symmetric and asymmetric encryption algorithms.</b>  Symmetric encryption uses the same key (or a simple transform of it) for encryption and decryption. The underlying mathematical operations are ones that can run in reverse so that the ciphertext can be decrypted back to the form and content of the original plaintext. Once compromised, this key can be used to decrypt all previously encrypted ciphertext—there is no forward privacy or secrecy. Asymmetric encryption uses a very different mathematical construct to encrypt than it does for decrypting; it is required that there be no computationally feasible or doable way to take ciphertext and solve for the original plaintext without having both the corresponding decryption algorithm and the decryption key. There should also be no way to mathematically derive the decryption key from the encryption key. Asymmetric encryption, when implemented with computationally difficult algorithms using very large numbers as factors and keys, provides inherently better security than symmetric encryption can, given the same size keys. It can also provide forward secrecy (protect previously encrypted ciphertext from being decrypted) when keys are changed or compromised. Asymmetric encryption and decryption are compute-intensive, using a lot of processing time, whereas symmetric encryption can be built to run very fast in hardware, software, or both. Thus most public key infrastructures use asymmetric encryption while establishing a session key and then use symmetric encryption, using that session key for the bulk of the session's communication.</p>&#13;
<p id="c07-para-0372" class="listPara1"><b>Understand the reasons for using cryptography as part of a secure information system.</b>  Unique identification of users, processes, files, or other information assets is a fundamental cornerstone of building any secure information system. Cryptographic techniques, from hashes through digital signatures and to encryption and decryption of data at rest, in motion, and in use, can provide a wide range of confidentiality, integrity, authentication, nonrepudiation, and availability benefits to systems designers. Modern cryptographic systems provide a wide range of choices, which allows systems builders to achieve <span epub:type="pagebreak" id="Page_427" role="doc-pagebreak" aria-label="427"/>the protection they need for costs (in money, time, effort, runtime resources, and operational complexity) commensurate with the risk.</p>&#13;
<p id="c07-para-0373" class="listPara1"><b>Explain why cryptography does not answer all information security needs.</b>  Most information systems security incidents occur because of flaws in business process design, implementation, and use; this includes the training, education, and proficiency of the human users and other workers within the organization as much as it includes the IT systems and components. Cryptography can strengthen access control, enhance the integrity and confidentiality of information, and add nonrepudiation as well—but it cannot prevent the unanticipated. Cryptography helps implement hierarchies of trust, but these are reliable only insofar as the human or supply chain aspects of those hierarchies are as trustworthy as is required.</p>&#13;
<p id="c07-para-0374" class="listPara1"><b>Know the regulatory and legal considerations for using cryptography in private business.</b>  Private businesses, in almost all jurisdictions, are subject to a variety of legal, government, and financial and insurance regulations regarding their safekeeping of information; these requirements are best summarized as CIANA+PS, or confidentiality, integrity, availability, nonrepudiation, authentication, privacy, and safety. Taken together, these should establish high-level, strategic needs for information security processes and systems, including cryptographic systems where applicable, for that business. Failing to do so puts customers, employees, owners, and the business at risk.</p>&#13;
<p id="c07-para-0375" class="listPara1"><b>Explain the major vulnerabilities in various cryptographic systems and processes.</b>  The encryption and decryption keys are the most critical elements of any cryptographic system, be it symmetric, asymmetric, or hybrid, paper or electronic. If the keys cannot be protected, then all is lost. Keys can be stolen. Algorithmic weaknesses can be discovered and exploited to enable partial or complete attacks on ciphertext. Physical characteristics, such as mechanical or electrical noise, timing, stray emanations, or data remaining after part or all of an encryption operation, can be accessed, analyzed, and used to identify exploitable weaknesses.</p>&#13;
<p id="c07-para-0376" class="listPara1"><b>Explain the difference between hierarchies of trust and webs of trust.</b>  Both concepts strive to establish associations or logical networks of entities. The topmost node of such a network, its trust anchor, confers trust upon intermediaries, which can then assert their trust to end (leaf) nodes. In hierarchies of trust, certificate authorities are the trusted anchors, which can issue certificates to intermediaries, which can issue certificates to the leaf nodes. End users, seeking to validate the trustworthiness of a certificate, infer that a certificate from a trusted end (leaf) node is trustworthy if the intermediary that issued it is, on up to the anchor. Webs of trust, by contrast, involve peer-to-peer trust relationships that do not rely on central certificate authorities as the anchors. Hierarchies of trust are much more scalable (to billions of certificates in use) than webs of trust. Both systems have drawbacks and issues, particularly with respect to certificate revocation, expiration, or the failure of a node to maintain trustworthiness.</p>&#13;
<p id="c07-para-0377" class="listPara1"><b>Explain the difference between character, block, and stream ciphers.</b>  Character ciphers encrypt and decrypt each single character or symbol in the input plaintext, such as is <span epub:type="pagebreak" id="Page_428" role="doc-pagebreak" aria-label="428"/>done by a simple alphabetic substitution cipher; the encryption key is used to encrypt (and decrypt) each character. Block ciphers encrypt and decrypt fixed-length groups (blocks) of symbols or bytes from the input plaintext, typically in fixed-length blocks, which are then encrypted via transposition, substitution, or both; block ciphers may also transpose blocks, and multistage block encryption can do that at any stage in the process. The keys for block ciphers are applied to each block for encryption and decryption. Stream ciphers treat the input plaintext and the key as if they were continuous streams of symbols, and they use one element of the key to encrypt one element of the plaintext. Stream ciphers must use a key whose length is longer than the input plaintext and is random across that length to prevent attacks against the ciphertext.</p>&#13;
<p id="c07-para-0378" class="listPara1"><b>Understand how encryption strength depends on the size of keys and other parameters.</b>  The simplest way to break an encryption system is to capture some ciphertext outputs from it, and using its known or assumed decryption algorithm, try every possible key and see if a presumed cleartext output is a meaningful message. Since even pure binary cleartext files (executable programs, for example) contain a lot of error checking and parity information, if a presumed cleartext output is error free, it probably is meaningful and might even be what the attacker is looking for. Key length determines how many possible keys must be tried—keys of 8-bit length require trying only 256 possible keys, for example. The larger the key, the larger the search space of possible keys. Using large, random salt or seed values as part of the encryption and decryption effectively enlarges that search space again. If the encryption and decryption algorithms depend on numbers, such as integer factors or exponents, the larger these values, again, the larger the search space.</p></li>&#13;
</ul>&#13;
</section>&#13;
<section aria-labelledby="head-2-138"><span id="c07-sec-0104"/>&#13;
<h2 id="head-2-138">Review Questions</h2>&#13;
<section><span id="c07-exsec-0001"/>&#13;
<ol class="decimal">&#13;
<li id="c07-ex-0001"><span epub:type="pagebreak" id="Page_429" role="doc-pagebreak" aria-label="429"/>Cryptography protects the meaning or content of files and messages by means of all of the following except which?&#13;
<ol class="upper-alpha">&#13;
<li>Obscuring meaning by misdirection, concealment, or deception</li>&#13;
<li>Obscuring meaning by making it difficult or impossible for unauthorized users to access, view, copy, or change it</li>&#13;
<li>Transforming the meaning and content of something into a unique value</li>&#13;
<li>Digitally signing files and messages to authenticate senders</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0002">Which of the following best describes symmetric encryption?&#13;
<ol class="upper-alpha">&#13;
<li>Uses one key to encrypt blocks of text to be ciphered and another key to decrypt it back</li>&#13;
<li>Uses the same key or a simple transform of it to encrypt plaintext into ciphertext, and to then decrypt the ciphertext back into plaintext</li>&#13;
<li>Was used extensively in classical encryption but has since been superseded by much stronger asymmetric encryption</li>&#13;
<li>Is best suited to plaintext that has a very high degree of regularity to its structure and content</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0003">Which statement about hashing is most correct?&#13;
<ol class="upper-alpha">&#13;
<li>Hashing performs lossy compression on the input cleartext data file by representing the digest of its meaning in a much smaller number of bits.</li>&#13;
<li>Hashing is almost exclusively used to produce indexes and pointers for database and file systems.</li>&#13;
<li>Hashing is one-way cryptography in that you transform a meaningful plaintext into a meaningless but unique hash value but you cannot go from hash value back to the original meaning or plaintext.</li>&#13;
<li>Hashing the contents of a file or a message is the first step in producing a private key.</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0004">How would you use cryptographic techniques to protect the integrity of data in a file if you do not require its content to remain confidential? (Choose all that apply.)&#13;
<ol class="upper-alpha">&#13;
<li>Use pervasive encryption techniques to secure the file contents at rest, in motion, and in use.</li>&#13;
<li>Encrypt the file using the private key of the creator, and make sure all legitimate users can find the corresponding public key.</li>&#13;
<li>Digitally sign the file, as is done with software patch files, device driver executables, and so forth.</li>&#13;
<li>Use an encrypting hash to produce a message digest; even a single bit change in the file will cause a subsequent message digest to be different, indicating a loss of integrity.</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0005">Properly used, cryptographic techniques improve all aspects of CIANA except which of the following?&#13;
<ol class="upper-alpha">&#13;
<li>Confidentiality</li>&#13;
<li>Authentication</li>&#13;
<li>Nonrepudiation</li>&#13;
<li>All aspects of CIANA can be enhanced via proper cryptographic techniques.</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0006"><span epub:type="pagebreak" id="Page_430" role="doc-pagebreak" aria-label="430"/>Nonrepudiation relies on cryptography to validate which of the following?&#13;
<ol class="upper-alpha">&#13;
<li>The sender or author of a document or file is who the recipient thinks it is.</li>&#13;
<li>The file or message has not been tampered with during transit or storage.</li>&#13;
<li>The file or message has not been viewed by others or copied without the sender's and named recipient's knowledge.</li>&#13;
<li>The certificate, public key, or both associated with the sender or author match what is associated with the file or message.</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0007">How can cryptography provide confidentiality and integrity across both time and space? (Choose all that apply.)&#13;
<ol class="upper-alpha">&#13;
<li>By protecting data in transit (via Internet or other means), it protects data when en route between two or more physically separated points (in space).</li>&#13;
<li>Since much of the Internet is carried on long-haul backbone circuits that go via satellite, encryption is used to protect data while being transmitted via radio through space to and from the satellite and ground stations. Without encryption, anybody could receive these signals and break out the data being exchanged.</li>&#13;
<li>Despite traveling at the speed of light, Internet traffic takes time to go from one user's system to another (i.e. from a client to a server); thus, encryption protects the data in motion during this time.</li>&#13;
<li>Encrypting a file for storage ensures that it cannot be read or tampered with by unauthorized users or processes (which do not have the key); later, authorized users with the key can read the file.</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0008">Which statement best describes how digital signatures work?&#13;
<ol class="upper-alpha">&#13;
<li>The sender hashes the message or file to produce a message digest and applies the chosen encryption algorithm and their private key to it. This is the signature. The recipient uses the sender's public key and applies the corresponding decryption algorithm to the signature, which will produce a matching message digest only if the message or file is authentically from the sender.</li>&#13;
<li>The sender hashes the message or file to produce a message digest and applies the chosen decryption algorithm and their public key to it. This is the signature. The recipient uses the sender's private key and applies the corresponding encryption algorithm to the signature, which will produce a matching message digest only if the message or file is authentically from the sender.</li>&#13;
<li>The sender hashes the message or file to produce a message digest and applies the chosen decryption algorithm and their private key to it. This is the signature. The recipient uses the sender's public key and applies the corresponding encryption algorithm to the signature, which will produce a matching message digest only if the message or file is authentically from the sender.</li>&#13;
<li>The sender encrypts the message or file with their private key and hashes the encrypted file to produce the signed message digest. This is the signature. The recipient uses the sender's public key and applies the corresponding decryption algorithm to the signature, which will produce a matching message digest only if the message or file is authentically from the sender.</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0009"><span epub:type="pagebreak" id="Page_431" role="doc-pagebreak" aria-label="431"/>What is the role of a hierarchy of trust in using digital signatures? Select the best answer.&#13;
<ol class="upper-alpha">&#13;
<li>Digital signature processes work at the transport layer of TCP/IP, which is below where browser-supported hierarchies of trust function.</li>&#13;
<li>The client's operating system, browsers, and applications either embed certificate authorities as trust anchors or use peer-to-peer trust anchors; the client's user must then trust these systems vendors and the installation of their products, and the client's user own use of them, to completely trust that received digitally signed files or messages are legitimate.</li>&#13;
<li>The client's operating system, browsers, and applications either embed certificate authorities as trust anchors or use peer-to-peer trust anchors; the recipient of digitally signed files or messages from that client trusts that the client is properly configured and uses valid certificates, and thus can trust the received content.</li>&#13;
<li>Certificate authorities, working with government agencies, establish trust anchors on which digital signatures are based; this assures recipients that digitally signed content they receive is from authenticated senders.</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0010">Which statements correctly describe the information security risks to most routine uses of email systems? (Choose all that apply.)&#13;
<ol class="upper-alpha">&#13;
<li>Almost all emails are sent unencrypted, with content, file attachment content, and address and routing information open to anyone who chooses to intercept it. This also means that content can be altered en route, and senders and recipients have no reasonable way to detect this.</li>&#13;
<li>No existing email systems have strong nonrepudiation capabilities, allowing senders to claim they never received emails or received ones with different content than what was sent.</li>&#13;
<li>Since most email server connections use HTTPS, only the routing information is exposed to potential disclosure via traffic analysis.</li>&#13;
<li>Most email systems provide ways of using encryption for message content, including attachments, or users can use peer-to-peer solutions like PGP, which will minimize the risk if used properly.</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0011">What is required to make a one-time pad encryption system truly unbreakable?&#13;
<ol class="upper-alpha">&#13;
<li>Use an obscure, published book, with a secret way of choosing the key from words, lines, or phrases in that book; this secret must be known only to sender and recipient. This simplifies the key distribution and management process.</li>&#13;
<li>Generate the one-time pad key using a cryptographically strong pseudorandom number generator, with a very large random number as seed. Ensure that no portion of it is ever reused, and ensure that only one sender and one recipient have copies of it. Destroy sections of the pad as they are used. Protect the one-time pads at both sender and recipient from loss, theft, or compromise. Provide secure, immediate means to signal both parties of any loss or compromise or change in identity of sender or recipient.</li>&#13;
<li><span epub:type="pagebreak" id="Page_432" role="doc-pagebreak" aria-label="432"/>Generate the one-time pad key in a truly random fashion, ensure that no portion of it is ever reused, and ensure that only one sender and one recipient have copies of it. Destroy sections of the pad as they are used. Protect the one-time pads at both sender and recipient from loss, theft, or compromise. Provide secure, immediate means to signal both parties of any loss or compromise or change in identity of sender or recipient.</li>&#13;
<li>Combine it with asymmetric encryption systems to create a hybrid architecture, using peer-to-peer certificate authority mechanisms that mask the real identity of the CA, sender, and recipient. This keeps the public keys very private (rather than published) for improved reliability.</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0012">How do webs of trust and hierarchies of trust differ? (Choose all that apply.)&#13;
<ol class="upper-alpha">&#13;
<li>Webs of trust are based on peer-to-peer architectures and as such are not very scalable to large numbers of users. Hierarchies of trust rely on certificate authorities as publishers of intermediate certificates, which supports much larger numbers of users.</li>&#13;
<li>Webs of trust work best when the peer trust anchors are incorporated into the IT logistics supply chain; hierarchies of trust do not need to have information embedded in vendor-provided product systems such as operating systems or browsers.</li>&#13;
<li>Webs of trust, as peer-to-peer architectures, are not part of the IT logistics supply chain; hierarchies of trust work best when CAs become part of the architecture of hardware, operating systems, browsers, and other applications.</li>&#13;
<li>They are actually common terms for the same set of architectures and implementations.</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0013">What are information risks that cryptography cannot address? (Choose all that apply.)&#13;
<ol class="upper-alpha">&#13;
<li>Display of data to humans, or output of data as device commands in control systems, needs to be in an unencrypted form to be usable.</li>&#13;
<li>Even cryptographic support for nonrepudiation cannot prove that a recipient (authorized or not) actually read and understood or made use of the contents of a protected file or message; it can only prove that they accessed it.</li>&#13;
<li>Cryptography cannot be used to reduce risks to information availability.</li>&#13;
<li>Users with legitimate access to a variety of information at one level of classification, when decrypted for use, may be able to infer the existence or value of information at higher levels of classification.</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0014">Which statement about the use of cryptography by private businesses is true?&#13;
<ol class="upper-alpha">&#13;
<li>In most countries, public law and government policy severely restrict the use of cryptography by anyone but the government.</li>&#13;
<li>Government policies and actions mean that most cryptographic systems available to business are easily broken when government needs to, for law enforcement or national security needs.</li>&#13;
<li>In many jurisdictions, law and regulation place significant responsibilities for information protection and due diligence on businesses; these can only be met in practical ways by using cryptographic systems.</li>&#13;
<li>Governments implement cryptographic module verifications programs, which assure businesses that systems they use that contain such modules will meet regulatory and legal constraints for privacy, data protection, and product safety.</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0015"><span epub:type="pagebreak" id="Page_433" role="doc-pagebreak" aria-label="433"/>How would you compare the relative security of character, block, or stream ciphers against cryptanalytic attacks?&#13;
<ol class="upper-alpha">&#13;
<li>They all depend on the security of the cryptographic key being used.</li>&#13;
<li>Character ciphers are the least secure, and stream ciphers the most secure.</li>&#13;
<li>Block ciphers support the best levels of security but with performance penalties that make stream ciphers suitable for some applications.</li>&#13;
<li>They all have comparable levels of security and depend on algorithms, control parameters, keys, implementation, and use to deliver the required security.</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0016">Why does cryptographic security tend to increase as the key size gets larger?&#13;
<ol class="upper-alpha">&#13;
<li>No matter what kind of cryptanalytic attack, the larger the key, the larger the possible space of key values that an attacker must test; each additional binary bit doubles this search or testing time. Ultimately, this requires more computing power and storage than even the most well-funded governments can afford.</li>&#13;
<li>This is a commonly held belief, but it's not actually true in most cases. Properly chosen algorithms and properly managed cryptosystems are proven to be unbreakable at current key sizes, and making the keys larger will only cause additional throughput delays.</li>&#13;
<li>This is only a concern for block ciphers, since if the key size is too small, these ciphers are easily broken with rainbow table or dictionary attacks.</li>&#13;
<li>Larger keys require more complex algorithms to execute without unacceptable runtime impacts, and this combines to provide even greater security.</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0017">What are the most common attacks that business or commercial use of cryptography might be exposed to?&#13;
<ol class="upper-alpha">&#13;
<li>Invalid, expired, or fraudulent certificates accepted for use</li>&#13;
<li>Optical, acoustic, or power line technical monitoring and analysis</li>&#13;
<li>Social engineering</li>&#13;
<li>Operational errors in use, such as incorrectly choosing control parameters or mismanaging keys or certificates</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0018">What is the most common source of exploitable vulnerabilities that business or commercial use of cryptography might present to attackers?&#13;
<ol class="upper-alpha">&#13;
<li>Invalid, expired, or fraudulent certificates accepted for use</li>&#13;
<li>Optical, acoustic, or power line technical monitoring and analysis</li>&#13;
<li>IT supply chain compromises that allow corrupted cryptographic modules to be inserted into systems</li>&#13;
<li>Operational errors in use, such as incorrectly choosing control parameters or mismanaging keys or certificates</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0019">Should a hash function be reversible?&#13;
<ol class="upper-alpha">&#13;
<li>No, because this would allow the plaintext to be decrypted from the hash, rendering message digests and digital signatures unworkable.</li>&#13;
<li>Yes, because this would allow the hash to contribute to error detection and correction operations.</li>&#13;
<li><span epub:type="pagebreak" id="Page_434" role="doc-pagebreak" aria-label="434"/>In a limited way, they are reversible, because the hash acts as a pointer or key into database and file management systems where the plaintext comes from.</li>&#13;
<li>No, because a hash is a many-to-one function and thus must have a collision detection and avoidance mechanism as part of its implementation; being reversible would negate this.</li>&#13;
</ol>&#13;
</li>&#13;
<li id="c07-ex-0020">What conditions might cause you to stop using a key? (Choose all that apply.)&#13;
<ol class="upper-alpha">&#13;
<li>Notification that a key has been lost or compromised</li>&#13;
<li>Suspicion that a user of that key is not who or what they claim to be</li>&#13;
<li>Indications that your public key has been hijacked by someone masquerading as you</li>&#13;
<li>You've used it more than 2048 times.</li>&#13;
</ol>&#13;
</li>&#13;
</ol>&#13;
</section>&#13;
</section>&#13;
</section>&#13;
</div></body>
</html>